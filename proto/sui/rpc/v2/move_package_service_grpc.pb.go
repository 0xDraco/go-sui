// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.4
// source: sui/rpc/v2/move_package_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MovePackageService_GetPackage_FullMethodName          = "/sui.rpc.v2.MovePackageService/GetPackage"
	MovePackageService_GetDatatype_FullMethodName         = "/sui.rpc.v2.MovePackageService/GetDatatype"
	MovePackageService_GetFunction_FullMethodName         = "/sui.rpc.v2.MovePackageService/GetFunction"
	MovePackageService_ListPackageVersions_FullMethodName = "/sui.rpc.v2.MovePackageService/ListPackageVersions"
)

// MovePackageServiceClient is the client API for MovePackageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovePackageServiceClient interface {
	GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*GetPackageResponse, error)
	GetDatatype(ctx context.Context, in *GetDatatypeRequest, opts ...grpc.CallOption) (*GetDatatypeResponse, error)
	GetFunction(ctx context.Context, in *GetFunctionRequest, opts ...grpc.CallOption) (*GetFunctionResponse, error)
	ListPackageVersions(ctx context.Context, in *ListPackageVersionsRequest, opts ...grpc.CallOption) (*ListPackageVersionsResponse, error)
}

type movePackageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovePackageServiceClient(cc grpc.ClientConnInterface) MovePackageServiceClient {
	return &movePackageServiceClient{cc}
}

func (c *movePackageServiceClient) GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*GetPackageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPackageResponse)
	err := c.cc.Invoke(ctx, MovePackageService_GetPackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movePackageServiceClient) GetDatatype(ctx context.Context, in *GetDatatypeRequest, opts ...grpc.CallOption) (*GetDatatypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDatatypeResponse)
	err := c.cc.Invoke(ctx, MovePackageService_GetDatatype_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movePackageServiceClient) GetFunction(ctx context.Context, in *GetFunctionRequest, opts ...grpc.CallOption) (*GetFunctionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFunctionResponse)
	err := c.cc.Invoke(ctx, MovePackageService_GetFunction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movePackageServiceClient) ListPackageVersions(ctx context.Context, in *ListPackageVersionsRequest, opts ...grpc.CallOption) (*ListPackageVersionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPackageVersionsResponse)
	err := c.cc.Invoke(ctx, MovePackageService_ListPackageVersions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovePackageServiceServer is the server API for MovePackageService service.
// All implementations must embed UnimplementedMovePackageServiceServer
// for forward compatibility.
type MovePackageServiceServer interface {
	GetPackage(context.Context, *GetPackageRequest) (*GetPackageResponse, error)
	GetDatatype(context.Context, *GetDatatypeRequest) (*GetDatatypeResponse, error)
	GetFunction(context.Context, *GetFunctionRequest) (*GetFunctionResponse, error)
	ListPackageVersions(context.Context, *ListPackageVersionsRequest) (*ListPackageVersionsResponse, error)
	mustEmbedUnimplementedMovePackageServiceServer()
}

// UnimplementedMovePackageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMovePackageServiceServer struct{}

func (UnimplementedMovePackageServiceServer) GetPackage(context.Context, *GetPackageRequest) (*GetPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackage not implemented")
}
func (UnimplementedMovePackageServiceServer) GetDatatype(context.Context, *GetDatatypeRequest) (*GetDatatypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatatype not implemented")
}
func (UnimplementedMovePackageServiceServer) GetFunction(context.Context, *GetFunctionRequest) (*GetFunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunction not implemented")
}
func (UnimplementedMovePackageServiceServer) ListPackageVersions(context.Context, *ListPackageVersionsRequest) (*ListPackageVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPackageVersions not implemented")
}
func (UnimplementedMovePackageServiceServer) mustEmbedUnimplementedMovePackageServiceServer() {}
func (UnimplementedMovePackageServiceServer) testEmbeddedByValue()                            {}

// UnsafeMovePackageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovePackageServiceServer will
// result in compilation errors.
type UnsafeMovePackageServiceServer interface {
	mustEmbedUnimplementedMovePackageServiceServer()
}

func RegisterMovePackageServiceServer(s grpc.ServiceRegistrar, srv MovePackageServiceServer) {
	// If the following call pancis, it indicates UnimplementedMovePackageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MovePackageService_ServiceDesc, srv)
}

func _MovePackageService_GetPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovePackageServiceServer).GetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovePackageService_GetPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovePackageServiceServer).GetPackage(ctx, req.(*GetPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovePackageService_GetDatatype_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatatypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovePackageServiceServer).GetDatatype(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovePackageService_GetDatatype_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovePackageServiceServer).GetDatatype(ctx, req.(*GetDatatypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovePackageService_GetFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovePackageServiceServer).GetFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovePackageService_GetFunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovePackageServiceServer).GetFunction(ctx, req.(*GetFunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovePackageService_ListPackageVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPackageVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovePackageServiceServer).ListPackageVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovePackageService_ListPackageVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovePackageServiceServer).ListPackageVersions(ctx, req.(*ListPackageVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovePackageService_ServiceDesc is the grpc.ServiceDesc for MovePackageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovePackageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sui.rpc.v2.MovePackageService",
	HandlerType: (*MovePackageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPackage",
			Handler:    _MovePackageService_GetPackage_Handler,
		},
		{
			MethodName: "GetDatatype",
			Handler:    _MovePackageService_GetDatatype_Handler,
		},
		{
			MethodName: "GetFunction",
			Handler:    _MovePackageService_GetFunction_Handler,
		},
		{
			MethodName: "ListPackageVersions",
			Handler:    _MovePackageService_ListPackageVersions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sui/rpc/v2/move_package_service.proto",
}
