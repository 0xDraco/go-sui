// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.4
// source: sui/rpc/v2/system_state.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SystemState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The version of the system state data structure type.
	Version *uint64 `protobuf:"varint,1,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// The epoch id
	Epoch *uint64 `protobuf:"varint,2,opt,name=epoch,proto3,oneof" json:"epoch,omitempty"`
	// The protocol version
	ProtocolVersion *uint64 `protobuf:"varint,3,opt,name=protocol_version,json=protocolVersion,proto3,oneof" json:"protocol_version,omitempty"`
	// Information about the validators
	Validators *ValidatorSet `protobuf:"bytes,4,opt,name=validators,proto3,oneof" json:"validators,omitempty"`
	// Storage Fund info
	StorageFund *StorageFund `protobuf:"bytes,5,opt,name=storage_fund,json=storageFund,proto3,oneof" json:"storage_fund,omitempty"`
	// Set of system config parameters
	Parameters *SystemParameters `protobuf:"bytes,6,opt,name=parameters,proto3,oneof" json:"parameters,omitempty"`
	// The reference gas price for this epoch
	ReferenceGasPrice *uint64 `protobuf:"varint,7,opt,name=reference_gas_price,json=referenceGasPrice,proto3,oneof" json:"reference_gas_price,omitempty"`
	// A list of the records of validator reporting each other.
	//
	// There is an entry in this list for each validator that has been reported
	// at least once. Each record contains all the validators that reported
	// them. If a validator has never been reported they don't have a record in this list.
	// This lists persists across epoch: a peer continues being in a reported state until the
	// reporter doesn't explicitly remove their report.
	ValidatorReportRecords []*ValidatorReportRecord `protobuf:"bytes,8,rep,name=validator_report_records,json=validatorReportRecords,proto3" json:"validator_report_records,omitempty"`
	// Schedule of stake subsidies given out each epoch.
	StakeSubsidy *StakeSubsidy `protobuf:"bytes,9,opt,name=stake_subsidy,json=stakeSubsidy,proto3,oneof" json:"stake_subsidy,omitempty"`
	// Whether the system is running in a downgraded safe mode due to a non-recoverable bug.
	// This is set whenever we failed to execute advance_epoch, and ended up executing advance_epoch_safe_mode.
	// It can be reset once we are able to successfully execute advance_epoch.
	// The rest of the fields starting with `safe_mode_` are accumulated during safe mode
	// when advance_epoch_safe_mode is executed. They will eventually be processed once we
	// are out of safe mode.
	SafeMode *bool `protobuf:"varint,10,opt,name=safe_mode,json=safeMode,proto3,oneof" json:"safe_mode,omitempty"`
	// Storage rewards accumulated during safe_mode
	SafeModeStorageRewards *uint64 `protobuf:"varint,11,opt,name=safe_mode_storage_rewards,json=safeModeStorageRewards,proto3,oneof" json:"safe_mode_storage_rewards,omitempty"`
	// Computation rewards accumulated during safe_mode
	SafeModeComputationRewards *uint64 `protobuf:"varint,12,opt,name=safe_mode_computation_rewards,json=safeModeComputationRewards,proto3,oneof" json:"safe_mode_computation_rewards,omitempty"`
	// Storage rebates paid out during safe_mode
	SafeModeStorageRebates *uint64 `protobuf:"varint,13,opt,name=safe_mode_storage_rebates,json=safeModeStorageRebates,proto3,oneof" json:"safe_mode_storage_rebates,omitempty"`
	// Nonrefundable storage fees accumulated during safe_mode
	SafeModeNonRefundableStorageFee *uint64 `protobuf:"varint,14,opt,name=safe_mode_non_refundable_storage_fee,json=safeModeNonRefundableStorageFee,proto3,oneof" json:"safe_mode_non_refundable_storage_fee,omitempty"`
	// Unix timestamp of when this this epoch started
	EpochStartTimestampMs *uint64 `protobuf:"varint,15,opt,name=epoch_start_timestamp_ms,json=epochStartTimestampMs,proto3,oneof" json:"epoch_start_timestamp_ms,omitempty"`
	// Any extra fields that's not defined statically.
	ExtraFields   *MoveTable `protobuf:"bytes,16,opt,name=extra_fields,json=extraFields,proto3,oneof" json:"extra_fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemState) Reset() {
	*x = SystemState{}
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemState) ProtoMessage() {}

func (x *SystemState) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemState.ProtoReflect.Descriptor instead.
func (*SystemState) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_system_state_proto_rawDescGZIP(), []int{0}
}

func (x *SystemState) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *SystemState) GetEpoch() uint64 {
	if x != nil && x.Epoch != nil {
		return *x.Epoch
	}
	return 0
}

func (x *SystemState) GetProtocolVersion() uint64 {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return 0
}

func (x *SystemState) GetValidators() *ValidatorSet {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *SystemState) GetStorageFund() *StorageFund {
	if x != nil {
		return x.StorageFund
	}
	return nil
}

func (x *SystemState) GetParameters() *SystemParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *SystemState) GetReferenceGasPrice() uint64 {
	if x != nil && x.ReferenceGasPrice != nil {
		return *x.ReferenceGasPrice
	}
	return 0
}

func (x *SystemState) GetValidatorReportRecords() []*ValidatorReportRecord {
	if x != nil {
		return x.ValidatorReportRecords
	}
	return nil
}

func (x *SystemState) GetStakeSubsidy() *StakeSubsidy {
	if x != nil {
		return x.StakeSubsidy
	}
	return nil
}

func (x *SystemState) GetSafeMode() bool {
	if x != nil && x.SafeMode != nil {
		return *x.SafeMode
	}
	return false
}

func (x *SystemState) GetSafeModeStorageRewards() uint64 {
	if x != nil && x.SafeModeStorageRewards != nil {
		return *x.SafeModeStorageRewards
	}
	return 0
}

func (x *SystemState) GetSafeModeComputationRewards() uint64 {
	if x != nil && x.SafeModeComputationRewards != nil {
		return *x.SafeModeComputationRewards
	}
	return 0
}

func (x *SystemState) GetSafeModeStorageRebates() uint64 {
	if x != nil && x.SafeModeStorageRebates != nil {
		return *x.SafeModeStorageRebates
	}
	return 0
}

func (x *SystemState) GetSafeModeNonRefundableStorageFee() uint64 {
	if x != nil && x.SafeModeNonRefundableStorageFee != nil {
		return *x.SafeModeNonRefundableStorageFee
	}
	return 0
}

func (x *SystemState) GetEpochStartTimestampMs() uint64 {
	if x != nil && x.EpochStartTimestampMs != nil {
		return *x.EpochStartTimestampMs
	}
	return 0
}

func (x *SystemState) GetExtraFields() *MoveTable {
	if x != nil {
		return x.ExtraFields
	}
	return nil
}

type ValidatorReportRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The address of the validator being reported
	Reported *string `protobuf:"bytes,1,opt,name=reported,proto3,oneof" json:"reported,omitempty"`
	// The list of validator (addresses) that are reporting on the validator specified by `reported`
	Reporters     []string `protobuf:"bytes,2,rep,name=reporters,proto3" json:"reporters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidatorReportRecord) Reset() {
	*x = ValidatorReportRecord{}
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidatorReportRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorReportRecord) ProtoMessage() {}

func (x *ValidatorReportRecord) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorReportRecord.ProtoReflect.Descriptor instead.
func (*ValidatorReportRecord) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_system_state_proto_rawDescGZIP(), []int{1}
}

func (x *ValidatorReportRecord) GetReported() string {
	if x != nil && x.Reported != nil {
		return *x.Reported
	}
	return ""
}

func (x *ValidatorReportRecord) GetReporters() []string {
	if x != nil {
		return x.Reporters
	}
	return nil
}

type SystemParameters struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The duration of an epoch, in milliseconds.
	EpochDurationMs *uint64 `protobuf:"varint,1,opt,name=epoch_duration_ms,json=epochDurationMs,proto3,oneof" json:"epoch_duration_ms,omitempty"`
	// The starting epoch in which stake subsidies start being paid out
	StakeSubsidyStartEpoch *uint64 `protobuf:"varint,2,opt,name=stake_subsidy_start_epoch,json=stakeSubsidyStartEpoch,proto3,oneof" json:"stake_subsidy_start_epoch,omitempty"`
	// Minimum number of active validators at any moment.
	MinValidatorCount *uint64 `protobuf:"varint,3,opt,name=min_validator_count,json=minValidatorCount,proto3,oneof" json:"min_validator_count,omitempty"`
	// Maximum number of active validators at any moment.
	// We do not allow the number of validators in any epoch to go above this.
	MaxValidatorCount *uint64 `protobuf:"varint,4,opt,name=max_validator_count,json=maxValidatorCount,proto3,oneof" json:"max_validator_count,omitempty"`
	// Deprecated.
	// Lower-bound on the amount of stake required to become a validator.
	MinValidatorJoiningStake *uint64 `protobuf:"varint,5,opt,name=min_validator_joining_stake,json=minValidatorJoiningStake,proto3,oneof" json:"min_validator_joining_stake,omitempty"`
	// Deprecated.
	// Validators with stake amount below `validator_low_stake_threshold` are considered to
	// have low stake and will be escorted out of the validator set after being below this
	// threshold for more than `validator_low_stake_grace_period` number of epochs.
	ValidatorLowStakeThreshold *uint64 `protobuf:"varint,6,opt,name=validator_low_stake_threshold,json=validatorLowStakeThreshold,proto3,oneof" json:"validator_low_stake_threshold,omitempty"`
	// Deprecated.
	// Validators with stake below `validator_very_low_stake_threshold` will be removed
	// immediately at epoch change, no grace period.
	ValidatorVeryLowStakeThreshold *uint64 `protobuf:"varint,7,opt,name=validator_very_low_stake_threshold,json=validatorVeryLowStakeThreshold,proto3,oneof" json:"validator_very_low_stake_threshold,omitempty"`
	// A validator can have stake below `validator_low_stake_threshold`
	// for this many epochs before being kicked out.
	ValidatorLowStakeGracePeriod *uint64 `protobuf:"varint,8,opt,name=validator_low_stake_grace_period,json=validatorLowStakeGracePeriod,proto3,oneof" json:"validator_low_stake_grace_period,omitempty"`
	// Any extra fields that are not defined statically.
	ExtraFields   *MoveTable `protobuf:"bytes,9,opt,name=extra_fields,json=extraFields,proto3,oneof" json:"extra_fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemParameters) Reset() {
	*x = SystemParameters{}
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemParameters) ProtoMessage() {}

func (x *SystemParameters) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemParameters.ProtoReflect.Descriptor instead.
func (*SystemParameters) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_system_state_proto_rawDescGZIP(), []int{2}
}

func (x *SystemParameters) GetEpochDurationMs() uint64 {
	if x != nil && x.EpochDurationMs != nil {
		return *x.EpochDurationMs
	}
	return 0
}

func (x *SystemParameters) GetStakeSubsidyStartEpoch() uint64 {
	if x != nil && x.StakeSubsidyStartEpoch != nil {
		return *x.StakeSubsidyStartEpoch
	}
	return 0
}

func (x *SystemParameters) GetMinValidatorCount() uint64 {
	if x != nil && x.MinValidatorCount != nil {
		return *x.MinValidatorCount
	}
	return 0
}

func (x *SystemParameters) GetMaxValidatorCount() uint64 {
	if x != nil && x.MaxValidatorCount != nil {
		return *x.MaxValidatorCount
	}
	return 0
}

func (x *SystemParameters) GetMinValidatorJoiningStake() uint64 {
	if x != nil && x.MinValidatorJoiningStake != nil {
		return *x.MinValidatorJoiningStake
	}
	return 0
}

func (x *SystemParameters) GetValidatorLowStakeThreshold() uint64 {
	if x != nil && x.ValidatorLowStakeThreshold != nil {
		return *x.ValidatorLowStakeThreshold
	}
	return 0
}

func (x *SystemParameters) GetValidatorVeryLowStakeThreshold() uint64 {
	if x != nil && x.ValidatorVeryLowStakeThreshold != nil {
		return *x.ValidatorVeryLowStakeThreshold
	}
	return 0
}

func (x *SystemParameters) GetValidatorLowStakeGracePeriod() uint64 {
	if x != nil && x.ValidatorLowStakeGracePeriod != nil {
		return *x.ValidatorLowStakeGracePeriod
	}
	return 0
}

func (x *SystemParameters) GetExtraFields() *MoveTable {
	if x != nil {
		return x.ExtraFields
	}
	return nil
}

// A message that represents a Move `0x2::table::Table` or `0x2::bag::Bag`
type MoveTable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UID of the table or bag
	Id *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// The size or number of key-value pairs in the table or bag
	Size          *uint64 `protobuf:"varint,2,opt,name=size,proto3,oneof" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MoveTable) Reset() {
	*x = MoveTable{}
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MoveTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveTable) ProtoMessage() {}

func (x *MoveTable) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveTable.ProtoReflect.Descriptor instead.
func (*MoveTable) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_system_state_proto_rawDescGZIP(), []int{3}
}

func (x *MoveTable) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *MoveTable) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

type StakeSubsidy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Balance of SUI set aside for stake subsidies that will be drawn down over time.
	Balance *uint64 `protobuf:"varint,1,opt,name=balance,proto3,oneof" json:"balance,omitempty"`
	// Count of the number of times stake subsidies have been distributed.
	DistributionCounter *uint64 `protobuf:"varint,2,opt,name=distribution_counter,json=distributionCounter,proto3,oneof" json:"distribution_counter,omitempty"`
	// The amount of stake subsidy to be drawn down per distribution.
	// This amount decays and decreases over time.
	CurrentDistributionAmount *uint64 `protobuf:"varint,3,opt,name=current_distribution_amount,json=currentDistributionAmount,proto3,oneof" json:"current_distribution_amount,omitempty"`
	// Number of distributions to occur before the distribution amount decays.
	StakeSubsidyPeriodLength *uint64 `protobuf:"varint,4,opt,name=stake_subsidy_period_length,json=stakeSubsidyPeriodLength,proto3,oneof" json:"stake_subsidy_period_length,omitempty"`
	// The rate at which the distribution amount decays at the end of each
	// period. Expressed in basis points.
	StakeSubsidyDecreaseRate *uint32 `protobuf:"varint,5,opt,name=stake_subsidy_decrease_rate,json=stakeSubsidyDecreaseRate,proto3,oneof" json:"stake_subsidy_decrease_rate,omitempty"`
	// Any extra fields that's not defined statically.
	ExtraFields   *MoveTable `protobuf:"bytes,6,opt,name=extra_fields,json=extraFields,proto3,oneof" json:"extra_fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StakeSubsidy) Reset() {
	*x = StakeSubsidy{}
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StakeSubsidy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeSubsidy) ProtoMessage() {}

func (x *StakeSubsidy) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeSubsidy.ProtoReflect.Descriptor instead.
func (*StakeSubsidy) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_system_state_proto_rawDescGZIP(), []int{4}
}

func (x *StakeSubsidy) GetBalance() uint64 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

func (x *StakeSubsidy) GetDistributionCounter() uint64 {
	if x != nil && x.DistributionCounter != nil {
		return *x.DistributionCounter
	}
	return 0
}

func (x *StakeSubsidy) GetCurrentDistributionAmount() uint64 {
	if x != nil && x.CurrentDistributionAmount != nil {
		return *x.CurrentDistributionAmount
	}
	return 0
}

func (x *StakeSubsidy) GetStakeSubsidyPeriodLength() uint64 {
	if x != nil && x.StakeSubsidyPeriodLength != nil {
		return *x.StakeSubsidyPeriodLength
	}
	return 0
}

func (x *StakeSubsidy) GetStakeSubsidyDecreaseRate() uint32 {
	if x != nil && x.StakeSubsidyDecreaseRate != nil {
		return *x.StakeSubsidyDecreaseRate
	}
	return 0
}

func (x *StakeSubsidy) GetExtraFields() *MoveTable {
	if x != nil {
		return x.ExtraFields
	}
	return nil
}

// Struct representing the onchain storage fund.
type StorageFund struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is the sum of `storage_rebate` of
	// all objects currently stored on-chain. To maintain this invariant, the only inflow of this
	// balance is storage charges collected from transactions, and the only outflow is storage rebates
	// of transactions, including both the portion refunded to the transaction senders as well as
	// the non-refundable portion taken out and put into `non_refundable_balance`.
	TotalObjectStorageRebates *uint64 `protobuf:"varint,1,opt,name=total_object_storage_rebates,json=totalObjectStorageRebates,proto3,oneof" json:"total_object_storage_rebates,omitempty"`
	// Represents any remaining inflow of the storage fund that should not
	// be taken out of the fund.
	NonRefundableBalance *uint64 `protobuf:"varint,2,opt,name=non_refundable_balance,json=nonRefundableBalance,proto3,oneof" json:"non_refundable_balance,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *StorageFund) Reset() {
	*x = StorageFund{}
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageFund) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageFund) ProtoMessage() {}

func (x *StorageFund) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageFund.ProtoReflect.Descriptor instead.
func (*StorageFund) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_system_state_proto_rawDescGZIP(), []int{5}
}

func (x *StorageFund) GetTotalObjectStorageRebates() uint64 {
	if x != nil && x.TotalObjectStorageRebates != nil {
		return *x.TotalObjectStorageRebates
	}
	return 0
}

func (x *StorageFund) GetNonRefundableBalance() uint64 {
	if x != nil && x.NonRefundableBalance != nil {
		return *x.NonRefundableBalance
	}
	return 0
}

type ValidatorSet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total amount of stake from all active validators at the beginning of the epoch.
	// Written only once per epoch, in `advance_epoch` function.
	TotalStake *uint64 `protobuf:"varint,1,opt,name=total_stake,json=totalStake,proto3,oneof" json:"total_stake,omitempty"`
	// The current list of active validators.
	ActiveValidators []*Validator `protobuf:"bytes,2,rep,name=active_validators,json=activeValidators,proto3" json:"active_validators,omitempty"`
	// List of new validator candidates added during the current epoch.
	// They will be processed at the end of the epoch.
	//
	// key: u64 (index), value: 0x3::validator::Validator
	PendingActiveValidators *MoveTable `protobuf:"bytes,3,opt,name=pending_active_validators,json=pendingActiveValidators,proto3,oneof" json:"pending_active_validators,omitempty"`
	// Removal requests from the validators. Each element is an index
	// pointing to `active_validators`.
	PendingRemovals []uint64 `protobuf:"varint,4,rep,packed,name=pending_removals,json=pendingRemovals,proto3" json:"pending_removals,omitempty"`
	// Mappings from staking pool's ID to the sui address of a validator.
	//
	// key: address (staking pool Id), value: address (sui address of the validator)
	StakingPoolMappings *MoveTable `protobuf:"bytes,5,opt,name=staking_pool_mappings,json=stakingPoolMappings,proto3,oneof" json:"staking_pool_mappings,omitempty"`
	// Mapping from a staking pool ID to the inactive validator that has that pool as its staking pool.
	// When a validator is deactivated the validator is removed from `active_validators` it
	// is added to this table so that stakers can continue to withdraw their stake from it.
	//
	// key: address (staking pool Id), value: 0x3::validator_wrapper::ValidatorWrapper
	InactiveValidators *MoveTable `protobuf:"bytes,6,opt,name=inactive_validators,json=inactiveValidators,proto3,oneof" json:"inactive_validators,omitempty"`
	// Table storing preactive/candidate validators, mapping their addresses to their `Validator ` structs.
	// When an address calls `request_add_validator_candidate`, they get added to this table and become a preactive
	// validator.
	// When the candidate has met the min stake requirement, they can call `request_add_validator` to
	// officially add them to the active validator set `active_validators` next epoch.
	//
	// key: address (sui address of the validator), value: 0x3::validator_wrapper::ValidatorWrapper
	ValidatorCandidates *MoveTable `protobuf:"bytes,7,opt,name=validator_candidates,json=validatorCandidates,proto3,oneof" json:"validator_candidates,omitempty"`
	// Table storing the number of epochs during which a validator's stake has been below the low stake threshold.
	AtRiskValidators map[string]uint64 `protobuf:"bytes,8,rep,name=at_risk_validators,json=atRiskValidators,proto3" json:"at_risk_validators,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// Any extra fields that's not defined statically.
	ExtraFields   *MoveTable `protobuf:"bytes,9,opt,name=extra_fields,json=extraFields,proto3,oneof" json:"extra_fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidatorSet) Reset() {
	*x = ValidatorSet{}
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidatorSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorSet) ProtoMessage() {}

func (x *ValidatorSet) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorSet.ProtoReflect.Descriptor instead.
func (*ValidatorSet) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_system_state_proto_rawDescGZIP(), []int{6}
}

func (x *ValidatorSet) GetTotalStake() uint64 {
	if x != nil && x.TotalStake != nil {
		return *x.TotalStake
	}
	return 0
}

func (x *ValidatorSet) GetActiveValidators() []*Validator {
	if x != nil {
		return x.ActiveValidators
	}
	return nil
}

func (x *ValidatorSet) GetPendingActiveValidators() *MoveTable {
	if x != nil {
		return x.PendingActiveValidators
	}
	return nil
}

func (x *ValidatorSet) GetPendingRemovals() []uint64 {
	if x != nil {
		return x.PendingRemovals
	}
	return nil
}

func (x *ValidatorSet) GetStakingPoolMappings() *MoveTable {
	if x != nil {
		return x.StakingPoolMappings
	}
	return nil
}

func (x *ValidatorSet) GetInactiveValidators() *MoveTable {
	if x != nil {
		return x.InactiveValidators
	}
	return nil
}

func (x *ValidatorSet) GetValidatorCandidates() *MoveTable {
	if x != nil {
		return x.ValidatorCandidates
	}
	return nil
}

func (x *ValidatorSet) GetAtRiskValidators() map[string]uint64 {
	if x != nil {
		return x.AtRiskValidators
	}
	return nil
}

func (x *ValidatorSet) GetExtraFields() *MoveTable {
	if x != nil {
		return x.ExtraFields
	}
	return nil
}

// Definition of a Validator in the system contracts
//
// Note: fields of ValidatorMetadata are flattened into this type
type Validator struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique human-readable name of this validator.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The Sui Address of the validator. This is the sender that created the Validator object,
	// and also the address to send validator/coins to during withdraws.
	Address     *string `protobuf:"bytes,2,opt,name=address,proto3,oneof" json:"address,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	ImageUrl    *string `protobuf:"bytes,4,opt,name=image_url,json=imageUrl,proto3,oneof" json:"image_url,omitempty"`
	ProjectUrl  *string `protobuf:"bytes,5,opt,name=project_url,json=projectUrl,proto3,oneof" json:"project_url,omitempty"`
	// The public key bytes corresponding to the private key that the validator
	// holds to sign transactions. For now, this is the same as AuthorityName.
	ProtocolPublicKey []byte `protobuf:"bytes,7,opt,name=protocol_public_key,json=protocolPublicKey,proto3,oneof" json:"protocol_public_key,omitempty"`
	// This is a proof that the validator has ownership of the protocol private key
	ProofOfPossession []byte `protobuf:"bytes,8,opt,name=proof_of_possession,json=proofOfPossession,proto3,oneof" json:"proof_of_possession,omitempty"`
	// The public key bytes corresponding to the private key that the validator
	// uses to establish TLS connections
	NetworkPublicKey []byte `protobuf:"bytes,10,opt,name=network_public_key,json=networkPublicKey,proto3,oneof" json:"network_public_key,omitempty"`
	// The public key bytes corresponding to the Narwhal Worker
	WorkerPublicKey []byte `protobuf:"bytes,12,opt,name=worker_public_key,json=workerPublicKey,proto3,oneof" json:"worker_public_key,omitempty"`
	// The network address of the validator (could also contain extra info such as port, DNS and etc.).
	NetworkAddress *string `protobuf:"bytes,13,opt,name=network_address,json=networkAddress,proto3,oneof" json:"network_address,omitempty"`
	// The address of the validator used for p2p activities such as state sync (could also contain extra info such as port, DNS and etc.).
	P2PAddress *string `protobuf:"bytes,14,opt,name=p2p_address,json=p2pAddress,proto3,oneof" json:"p2p_address,omitempty"`
	// The address of the narwhal primary
	PrimaryAddress *string `protobuf:"bytes,15,opt,name=primary_address,json=primaryAddress,proto3,oneof" json:"primary_address,omitempty"`
	// The address of the narwhal worker
	WorkerAddress              *string `protobuf:"bytes,16,opt,name=worker_address,json=workerAddress,proto3,oneof" json:"worker_address,omitempty"`
	NextEpochProtocolPublicKey []byte  `protobuf:"bytes,18,opt,name=next_epoch_protocol_public_key,json=nextEpochProtocolPublicKey,proto3,oneof" json:"next_epoch_protocol_public_key,omitempty"`
	NextEpochProofOfPossession []byte  `protobuf:"bytes,19,opt,name=next_epoch_proof_of_possession,json=nextEpochProofOfPossession,proto3,oneof" json:"next_epoch_proof_of_possession,omitempty"`
	NextEpochNetworkPublicKey  []byte  `protobuf:"bytes,21,opt,name=next_epoch_network_public_key,json=nextEpochNetworkPublicKey,proto3,oneof" json:"next_epoch_network_public_key,omitempty"`
	NextEpochWorkerPublicKey   []byte  `protobuf:"bytes,23,opt,name=next_epoch_worker_public_key,json=nextEpochWorkerPublicKey,proto3,oneof" json:"next_epoch_worker_public_key,omitempty"`
	NextEpochNetworkAddress    *string `protobuf:"bytes,24,opt,name=next_epoch_network_address,json=nextEpochNetworkAddress,proto3,oneof" json:"next_epoch_network_address,omitempty"`
	NextEpochP2PAddress        *string `protobuf:"bytes,25,opt,name=next_epoch_p2p_address,json=nextEpochP2pAddress,proto3,oneof" json:"next_epoch_p2p_address,omitempty"`
	NextEpochPrimaryAddress    *string `protobuf:"bytes,26,opt,name=next_epoch_primary_address,json=nextEpochPrimaryAddress,proto3,oneof" json:"next_epoch_primary_address,omitempty"`
	NextEpochWorkerAddress     *string `protobuf:"bytes,27,opt,name=next_epoch_worker_address,json=nextEpochWorkerAddress,proto3,oneof" json:"next_epoch_worker_address,omitempty"`
	// Any extra fields that's not defined statically in the `ValidatorMetadata` struct
	MetadataExtraFields *MoveTable `protobuf:"bytes,28,opt,name=metadata_extra_fields,json=metadataExtraFields,proto3,oneof" json:"metadata_extra_fields,omitempty"`
	// The voting power of this validator, which might be different from its
	// stake amount.
	VotingPower *uint64 `protobuf:"varint,29,opt,name=voting_power,json=votingPower,proto3,oneof" json:"voting_power,omitempty"`
	// The ID of this validator's current valid `UnverifiedValidatorOperationCap`
	OperationCapId *string `protobuf:"bytes,30,opt,name=operation_cap_id,json=operationCapId,proto3,oneof" json:"operation_cap_id,omitempty"`
	// Gas price quote, updated only at end of epoch.
	GasPrice *uint64 `protobuf:"varint,31,opt,name=gas_price,json=gasPrice,proto3,oneof" json:"gas_price,omitempty"`
	// Staking pool for this validator.
	StakingPool *StakingPool `protobuf:"bytes,32,opt,name=staking_pool,json=stakingPool,proto3,oneof" json:"staking_pool,omitempty"`
	// Commission rate of the validator, in basis point.
	CommissionRate *uint64 `protobuf:"varint,33,opt,name=commission_rate,json=commissionRate,proto3,oneof" json:"commission_rate,omitempty"`
	// Total amount of stake that would be active in the next epoch.
	NextEpochStake *uint64 `protobuf:"varint,34,opt,name=next_epoch_stake,json=nextEpochStake,proto3,oneof" json:"next_epoch_stake,omitempty"`
	// This validator's gas price quote for the next epoch.
	NextEpochGasPrice *uint64 `protobuf:"varint,35,opt,name=next_epoch_gas_price,json=nextEpochGasPrice,proto3,oneof" json:"next_epoch_gas_price,omitempty"`
	// The commission rate of the validator starting the next epoch, in basis point.
	NextEpochCommissionRate *uint64 `protobuf:"varint,36,opt,name=next_epoch_commission_rate,json=nextEpochCommissionRate,proto3,oneof" json:"next_epoch_commission_rate,omitempty"`
	// Any extra fields that's not defined statically.
	ExtraFields   *MoveTable `protobuf:"bytes,37,opt,name=extra_fields,json=extraFields,proto3,oneof" json:"extra_fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Validator) Reset() {
	*x = Validator{}
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validator) ProtoMessage() {}

func (x *Validator) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validator.ProtoReflect.Descriptor instead.
func (*Validator) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_system_state_proto_rawDescGZIP(), []int{7}
}

func (x *Validator) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Validator) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *Validator) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Validator) GetImageUrl() string {
	if x != nil && x.ImageUrl != nil {
		return *x.ImageUrl
	}
	return ""
}

func (x *Validator) GetProjectUrl() string {
	if x != nil && x.ProjectUrl != nil {
		return *x.ProjectUrl
	}
	return ""
}

func (x *Validator) GetProtocolPublicKey() []byte {
	if x != nil {
		return x.ProtocolPublicKey
	}
	return nil
}

func (x *Validator) GetProofOfPossession() []byte {
	if x != nil {
		return x.ProofOfPossession
	}
	return nil
}

func (x *Validator) GetNetworkPublicKey() []byte {
	if x != nil {
		return x.NetworkPublicKey
	}
	return nil
}

func (x *Validator) GetWorkerPublicKey() []byte {
	if x != nil {
		return x.WorkerPublicKey
	}
	return nil
}

func (x *Validator) GetNetworkAddress() string {
	if x != nil && x.NetworkAddress != nil {
		return *x.NetworkAddress
	}
	return ""
}

func (x *Validator) GetP2PAddress() string {
	if x != nil && x.P2PAddress != nil {
		return *x.P2PAddress
	}
	return ""
}

func (x *Validator) GetPrimaryAddress() string {
	if x != nil && x.PrimaryAddress != nil {
		return *x.PrimaryAddress
	}
	return ""
}

func (x *Validator) GetWorkerAddress() string {
	if x != nil && x.WorkerAddress != nil {
		return *x.WorkerAddress
	}
	return ""
}

func (x *Validator) GetNextEpochProtocolPublicKey() []byte {
	if x != nil {
		return x.NextEpochProtocolPublicKey
	}
	return nil
}

func (x *Validator) GetNextEpochProofOfPossession() []byte {
	if x != nil {
		return x.NextEpochProofOfPossession
	}
	return nil
}

func (x *Validator) GetNextEpochNetworkPublicKey() []byte {
	if x != nil {
		return x.NextEpochNetworkPublicKey
	}
	return nil
}

func (x *Validator) GetNextEpochWorkerPublicKey() []byte {
	if x != nil {
		return x.NextEpochWorkerPublicKey
	}
	return nil
}

func (x *Validator) GetNextEpochNetworkAddress() string {
	if x != nil && x.NextEpochNetworkAddress != nil {
		return *x.NextEpochNetworkAddress
	}
	return ""
}

func (x *Validator) GetNextEpochP2PAddress() string {
	if x != nil && x.NextEpochP2PAddress != nil {
		return *x.NextEpochP2PAddress
	}
	return ""
}

func (x *Validator) GetNextEpochPrimaryAddress() string {
	if x != nil && x.NextEpochPrimaryAddress != nil {
		return *x.NextEpochPrimaryAddress
	}
	return ""
}

func (x *Validator) GetNextEpochWorkerAddress() string {
	if x != nil && x.NextEpochWorkerAddress != nil {
		return *x.NextEpochWorkerAddress
	}
	return ""
}

func (x *Validator) GetMetadataExtraFields() *MoveTable {
	if x != nil {
		return x.MetadataExtraFields
	}
	return nil
}

func (x *Validator) GetVotingPower() uint64 {
	if x != nil && x.VotingPower != nil {
		return *x.VotingPower
	}
	return 0
}

func (x *Validator) GetOperationCapId() string {
	if x != nil && x.OperationCapId != nil {
		return *x.OperationCapId
	}
	return ""
}

func (x *Validator) GetGasPrice() uint64 {
	if x != nil && x.GasPrice != nil {
		return *x.GasPrice
	}
	return 0
}

func (x *Validator) GetStakingPool() *StakingPool {
	if x != nil {
		return x.StakingPool
	}
	return nil
}

func (x *Validator) GetCommissionRate() uint64 {
	if x != nil && x.CommissionRate != nil {
		return *x.CommissionRate
	}
	return 0
}

func (x *Validator) GetNextEpochStake() uint64 {
	if x != nil && x.NextEpochStake != nil {
		return *x.NextEpochStake
	}
	return 0
}

func (x *Validator) GetNextEpochGasPrice() uint64 {
	if x != nil && x.NextEpochGasPrice != nil {
		return *x.NextEpochGasPrice
	}
	return 0
}

func (x *Validator) GetNextEpochCommissionRate() uint64 {
	if x != nil && x.NextEpochCommissionRate != nil {
		return *x.NextEpochCommissionRate
	}
	return 0
}

func (x *Validator) GetExtraFields() *MoveTable {
	if x != nil {
		return x.ExtraFields
	}
	return nil
}

// A staking pool embedded in each validator struct in the system state object.
type StakingPool struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UID of the StakingPool object
	Id *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// The epoch at which this pool became active.
	// The value is `None` if the pool is pre-active and `Some(<epoch_number>)` if active or inactive.
	ActivationEpoch *uint64 `protobuf:"varint,2,opt,name=activation_epoch,json=activationEpoch,proto3,oneof" json:"activation_epoch,omitempty"`
	// The epoch at which this staking pool ceased to be active. `None` = {pre-active, active},
	// `Some(<epoch_number>)` if in-active, and it was de-activated at epoch `<epoch_number>`.
	DeactivationEpoch *uint64 `protobuf:"varint,3,opt,name=deactivation_epoch,json=deactivationEpoch,proto3,oneof" json:"deactivation_epoch,omitempty"`
	// The total number of SUI tokens in this pool, including the SUI in the rewards_pool, as well as in all the principal
	// in the `StakedSui` object, updated at epoch boundaries.
	SuiBalance *uint64 `protobuf:"varint,4,opt,name=sui_balance,json=suiBalance,proto3,oneof" json:"sui_balance,omitempty"`
	// The epoch stake rewards will be added here at the end of each epoch.
	RewardsPool *uint64 `protobuf:"varint,5,opt,name=rewards_pool,json=rewardsPool,proto3,oneof" json:"rewards_pool,omitempty"`
	// Total number of pool tokens issued by the pool.
	PoolTokenBalance *uint64 `protobuf:"varint,6,opt,name=pool_token_balance,json=poolTokenBalance,proto3,oneof" json:"pool_token_balance,omitempty"`
	// Exchange rate history of previous epochs.
	//
	// The entries start from the `activation_epoch` of this pool and contains exchange rates at the beginning of each epoch,
	// i.e., right after the rewards for the previous epoch have been deposited into the pool.
	//
	// key: u64 (epoch number), value: PoolTokenExchangeRate
	ExchangeRates *MoveTable `protobuf:"bytes,7,opt,name=exchange_rates,json=exchangeRates,proto3,oneof" json:"exchange_rates,omitempty"`
	// Pending stake amount for this epoch, emptied at epoch boundaries.
	PendingStake *uint64 `protobuf:"varint,8,opt,name=pending_stake,json=pendingStake,proto3,oneof" json:"pending_stake,omitempty"`
	// Pending stake withdrawn during the current epoch, emptied at epoch boundaries.
	// This includes both the principal and rewards SUI withdrawn.
	PendingTotalSuiWithdraw *uint64 `protobuf:"varint,9,opt,name=pending_total_sui_withdraw,json=pendingTotalSuiWithdraw,proto3,oneof" json:"pending_total_sui_withdraw,omitempty"`
	// Pending pool token withdrawn during the current epoch, emptied at epoch boundaries.
	PendingPoolTokenWithdraw *uint64 `protobuf:"varint,10,opt,name=pending_pool_token_withdraw,json=pendingPoolTokenWithdraw,proto3,oneof" json:"pending_pool_token_withdraw,omitempty"`
	// Any extra fields that's not defined statically.
	ExtraFields   *MoveTable `protobuf:"bytes,11,opt,name=extra_fields,json=extraFields,proto3,oneof" json:"extra_fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StakingPool) Reset() {
	*x = StakingPool{}
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StakingPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingPool) ProtoMessage() {}

func (x *StakingPool) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_system_state_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingPool.ProtoReflect.Descriptor instead.
func (*StakingPool) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_system_state_proto_rawDescGZIP(), []int{8}
}

func (x *StakingPool) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *StakingPool) GetActivationEpoch() uint64 {
	if x != nil && x.ActivationEpoch != nil {
		return *x.ActivationEpoch
	}
	return 0
}

func (x *StakingPool) GetDeactivationEpoch() uint64 {
	if x != nil && x.DeactivationEpoch != nil {
		return *x.DeactivationEpoch
	}
	return 0
}

func (x *StakingPool) GetSuiBalance() uint64 {
	if x != nil && x.SuiBalance != nil {
		return *x.SuiBalance
	}
	return 0
}

func (x *StakingPool) GetRewardsPool() uint64 {
	if x != nil && x.RewardsPool != nil {
		return *x.RewardsPool
	}
	return 0
}

func (x *StakingPool) GetPoolTokenBalance() uint64 {
	if x != nil && x.PoolTokenBalance != nil {
		return *x.PoolTokenBalance
	}
	return 0
}

func (x *StakingPool) GetExchangeRates() *MoveTable {
	if x != nil {
		return x.ExchangeRates
	}
	return nil
}

func (x *StakingPool) GetPendingStake() uint64 {
	if x != nil && x.PendingStake != nil {
		return *x.PendingStake
	}
	return 0
}

func (x *StakingPool) GetPendingTotalSuiWithdraw() uint64 {
	if x != nil && x.PendingTotalSuiWithdraw != nil {
		return *x.PendingTotalSuiWithdraw
	}
	return 0
}

func (x *StakingPool) GetPendingPoolTokenWithdraw() uint64 {
	if x != nil && x.PendingPoolTokenWithdraw != nil {
		return *x.PendingPoolTokenWithdraw
	}
	return 0
}

func (x *StakingPool) GetExtraFields() *MoveTable {
	if x != nil {
		return x.ExtraFields
	}
	return nil
}

var File_sui_rpc_v2_system_state_proto protoreflect.FileDescriptor

const file_sui_rpc_v2_system_state_proto_rawDesc = "" +
	"\n" +
	"\x1dsui/rpc/v2/system_state.proto\x12\n" +
	"sui.rpc.v2\"\x92\n" +
	"\n" +
	"\vSystemState\x12\x1d\n" +
	"\aversion\x18\x01 \x01(\x04H\x00R\aversion\x88\x01\x01\x12\x19\n" +
	"\x05epoch\x18\x02 \x01(\x04H\x01R\x05epoch\x88\x01\x01\x12.\n" +
	"\x10protocol_version\x18\x03 \x01(\x04H\x02R\x0fprotocolVersion\x88\x01\x01\x12=\n" +
	"\n" +
	"validators\x18\x04 \x01(\v2\x18.sui.rpc.v2.ValidatorSetH\x03R\n" +
	"validators\x88\x01\x01\x12?\n" +
	"\fstorage_fund\x18\x05 \x01(\v2\x17.sui.rpc.v2.StorageFundH\x04R\vstorageFund\x88\x01\x01\x12A\n" +
	"\n" +
	"parameters\x18\x06 \x01(\v2\x1c.sui.rpc.v2.SystemParametersH\x05R\n" +
	"parameters\x88\x01\x01\x123\n" +
	"\x13reference_gas_price\x18\a \x01(\x04H\x06R\x11referenceGasPrice\x88\x01\x01\x12[\n" +
	"\x18validator_report_records\x18\b \x03(\v2!.sui.rpc.v2.ValidatorReportRecordR\x16validatorReportRecords\x12B\n" +
	"\rstake_subsidy\x18\t \x01(\v2\x18.sui.rpc.v2.StakeSubsidyH\aR\fstakeSubsidy\x88\x01\x01\x12 \n" +
	"\tsafe_mode\x18\n" +
	" \x01(\bH\bR\bsafeMode\x88\x01\x01\x12>\n" +
	"\x19safe_mode_storage_rewards\x18\v \x01(\x04H\tR\x16safeModeStorageRewards\x88\x01\x01\x12F\n" +
	"\x1dsafe_mode_computation_rewards\x18\f \x01(\x04H\n" +
	"R\x1asafeModeComputationRewards\x88\x01\x01\x12>\n" +
	"\x19safe_mode_storage_rebates\x18\r \x01(\x04H\vR\x16safeModeStorageRebates\x88\x01\x01\x12R\n" +
	"$safe_mode_non_refundable_storage_fee\x18\x0e \x01(\x04H\fR\x1fsafeModeNonRefundableStorageFee\x88\x01\x01\x12<\n" +
	"\x18epoch_start_timestamp_ms\x18\x0f \x01(\x04H\rR\x15epochStartTimestampMs\x88\x01\x01\x12=\n" +
	"\fextra_fields\x18\x10 \x01(\v2\x15.sui.rpc.v2.MoveTableH\x0eR\vextraFields\x88\x01\x01B\n" +
	"\n" +
	"\b_versionB\b\n" +
	"\x06_epochB\x13\n" +
	"\x11_protocol_versionB\r\n" +
	"\v_validatorsB\x0f\n" +
	"\r_storage_fundB\r\n" +
	"\v_parametersB\x16\n" +
	"\x14_reference_gas_priceB\x10\n" +
	"\x0e_stake_subsidyB\f\n" +
	"\n" +
	"_safe_modeB\x1c\n" +
	"\x1a_safe_mode_storage_rewardsB \n" +
	"\x1e_safe_mode_computation_rewardsB\x1c\n" +
	"\x1a_safe_mode_storage_rebatesB'\n" +
	"%_safe_mode_non_refundable_storage_feeB\x1b\n" +
	"\x19_epoch_start_timestamp_msB\x0f\n" +
	"\r_extra_fields\"c\n" +
	"\x15ValidatorReportRecord\x12\x1f\n" +
	"\breported\x18\x01 \x01(\tH\x00R\breported\x88\x01\x01\x12\x1c\n" +
	"\treporters\x18\x02 \x03(\tR\treportersB\v\n" +
	"\t_reported\"\xd9\x06\n" +
	"\x10SystemParameters\x12/\n" +
	"\x11epoch_duration_ms\x18\x01 \x01(\x04H\x00R\x0fepochDurationMs\x88\x01\x01\x12>\n" +
	"\x19stake_subsidy_start_epoch\x18\x02 \x01(\x04H\x01R\x16stakeSubsidyStartEpoch\x88\x01\x01\x123\n" +
	"\x13min_validator_count\x18\x03 \x01(\x04H\x02R\x11minValidatorCount\x88\x01\x01\x123\n" +
	"\x13max_validator_count\x18\x04 \x01(\x04H\x03R\x11maxValidatorCount\x88\x01\x01\x12B\n" +
	"\x1bmin_validator_joining_stake\x18\x05 \x01(\x04H\x04R\x18minValidatorJoiningStake\x88\x01\x01\x12F\n" +
	"\x1dvalidator_low_stake_threshold\x18\x06 \x01(\x04H\x05R\x1avalidatorLowStakeThreshold\x88\x01\x01\x12O\n" +
	"\"validator_very_low_stake_threshold\x18\a \x01(\x04H\x06R\x1evalidatorVeryLowStakeThreshold\x88\x01\x01\x12K\n" +
	" validator_low_stake_grace_period\x18\b \x01(\x04H\aR\x1cvalidatorLowStakeGracePeriod\x88\x01\x01\x12=\n" +
	"\fextra_fields\x18\t \x01(\v2\x15.sui.rpc.v2.MoveTableH\bR\vextraFields\x88\x01\x01B\x14\n" +
	"\x12_epoch_duration_msB\x1c\n" +
	"\x1a_stake_subsidy_start_epochB\x16\n" +
	"\x14_min_validator_countB\x16\n" +
	"\x14_max_validator_countB\x1e\n" +
	"\x1c_min_validator_joining_stakeB \n" +
	"\x1e_validator_low_stake_thresholdB%\n" +
	"#_validator_very_low_stake_thresholdB#\n" +
	"!_validator_low_stake_grace_periodB\x0f\n" +
	"\r_extra_fields\"I\n" +
	"\tMoveTable\x12\x13\n" +
	"\x02id\x18\x01 \x01(\tH\x00R\x02id\x88\x01\x01\x12\x17\n" +
	"\x04size\x18\x02 \x01(\x04H\x01R\x04size\x88\x01\x01B\x05\n" +
	"\x03_idB\a\n" +
	"\x05_size\"\x87\x04\n" +
	"\fStakeSubsidy\x12\x1d\n" +
	"\abalance\x18\x01 \x01(\x04H\x00R\abalance\x88\x01\x01\x126\n" +
	"\x14distribution_counter\x18\x02 \x01(\x04H\x01R\x13distributionCounter\x88\x01\x01\x12C\n" +
	"\x1bcurrent_distribution_amount\x18\x03 \x01(\x04H\x02R\x19currentDistributionAmount\x88\x01\x01\x12B\n" +
	"\x1bstake_subsidy_period_length\x18\x04 \x01(\x04H\x03R\x18stakeSubsidyPeriodLength\x88\x01\x01\x12B\n" +
	"\x1bstake_subsidy_decrease_rate\x18\x05 \x01(\rH\x04R\x18stakeSubsidyDecreaseRate\x88\x01\x01\x12=\n" +
	"\fextra_fields\x18\x06 \x01(\v2\x15.sui.rpc.v2.MoveTableH\x05R\vextraFields\x88\x01\x01B\n" +
	"\n" +
	"\b_balanceB\x17\n" +
	"\x15_distribution_counterB\x1e\n" +
	"\x1c_current_distribution_amountB\x1e\n" +
	"\x1c_stake_subsidy_period_lengthB\x1e\n" +
	"\x1c_stake_subsidy_decrease_rateB\x0f\n" +
	"\r_extra_fields\"\xca\x01\n" +
	"\vStorageFund\x12D\n" +
	"\x1ctotal_object_storage_rebates\x18\x01 \x01(\x04H\x00R\x19totalObjectStorageRebates\x88\x01\x01\x129\n" +
	"\x16non_refundable_balance\x18\x02 \x01(\x04H\x01R\x14nonRefundableBalance\x88\x01\x01B\x1f\n" +
	"\x1d_total_object_storage_rebatesB\x19\n" +
	"\x17_non_refundable_balance\"\xd3\x06\n" +
	"\fValidatorSet\x12$\n" +
	"\vtotal_stake\x18\x01 \x01(\x04H\x00R\n" +
	"totalStake\x88\x01\x01\x12B\n" +
	"\x11active_validators\x18\x02 \x03(\v2\x15.sui.rpc.v2.ValidatorR\x10activeValidators\x12V\n" +
	"\x19pending_active_validators\x18\x03 \x01(\v2\x15.sui.rpc.v2.MoveTableH\x01R\x17pendingActiveValidators\x88\x01\x01\x12)\n" +
	"\x10pending_removals\x18\x04 \x03(\x04R\x0fpendingRemovals\x12N\n" +
	"\x15staking_pool_mappings\x18\x05 \x01(\v2\x15.sui.rpc.v2.MoveTableH\x02R\x13stakingPoolMappings\x88\x01\x01\x12K\n" +
	"\x13inactive_validators\x18\x06 \x01(\v2\x15.sui.rpc.v2.MoveTableH\x03R\x12inactiveValidators\x88\x01\x01\x12M\n" +
	"\x14validator_candidates\x18\a \x01(\v2\x15.sui.rpc.v2.MoveTableH\x04R\x13validatorCandidates\x88\x01\x01\x12\\\n" +
	"\x12at_risk_validators\x18\b \x03(\v2..sui.rpc.v2.ValidatorSet.AtRiskValidatorsEntryR\x10atRiskValidators\x12=\n" +
	"\fextra_fields\x18\t \x01(\v2\x15.sui.rpc.v2.MoveTableH\x05R\vextraFields\x88\x01\x01\x1aC\n" +
	"\x15AtRiskValidatorsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01B\x0e\n" +
	"\f_total_stakeB\x1c\n" +
	"\x1a_pending_active_validatorsB\x18\n" +
	"\x16_staking_pool_mappingsB\x16\n" +
	"\x14_inactive_validatorsB\x17\n" +
	"\x15_validator_candidatesB\x0f\n" +
	"\r_extra_fields\"\xc8\x12\n" +
	"\tValidator\x12\x17\n" +
	"\x04name\x18\x01 \x01(\tH\x00R\x04name\x88\x01\x01\x12\x1d\n" +
	"\aaddress\x18\x02 \x01(\tH\x01R\aaddress\x88\x01\x01\x12%\n" +
	"\vdescription\x18\x03 \x01(\tH\x02R\vdescription\x88\x01\x01\x12 \n" +
	"\timage_url\x18\x04 \x01(\tH\x03R\bimageUrl\x88\x01\x01\x12$\n" +
	"\vproject_url\x18\x05 \x01(\tH\x04R\n" +
	"projectUrl\x88\x01\x01\x123\n" +
	"\x13protocol_public_key\x18\a \x01(\fH\x05R\x11protocolPublicKey\x88\x01\x01\x123\n" +
	"\x13proof_of_possession\x18\b \x01(\fH\x06R\x11proofOfPossession\x88\x01\x01\x121\n" +
	"\x12network_public_key\x18\n" +
	" \x01(\fH\aR\x10networkPublicKey\x88\x01\x01\x12/\n" +
	"\x11worker_public_key\x18\f \x01(\fH\bR\x0fworkerPublicKey\x88\x01\x01\x12,\n" +
	"\x0fnetwork_address\x18\r \x01(\tH\tR\x0enetworkAddress\x88\x01\x01\x12$\n" +
	"\vp2p_address\x18\x0e \x01(\tH\n" +
	"R\n" +
	"p2pAddress\x88\x01\x01\x12,\n" +
	"\x0fprimary_address\x18\x0f \x01(\tH\vR\x0eprimaryAddress\x88\x01\x01\x12*\n" +
	"\x0eworker_address\x18\x10 \x01(\tH\fR\rworkerAddress\x88\x01\x01\x12G\n" +
	"\x1enext_epoch_protocol_public_key\x18\x12 \x01(\fH\rR\x1anextEpochProtocolPublicKey\x88\x01\x01\x12G\n" +
	"\x1enext_epoch_proof_of_possession\x18\x13 \x01(\fH\x0eR\x1anextEpochProofOfPossession\x88\x01\x01\x12E\n" +
	"\x1dnext_epoch_network_public_key\x18\x15 \x01(\fH\x0fR\x19nextEpochNetworkPublicKey\x88\x01\x01\x12C\n" +
	"\x1cnext_epoch_worker_public_key\x18\x17 \x01(\fH\x10R\x18nextEpochWorkerPublicKey\x88\x01\x01\x12@\n" +
	"\x1anext_epoch_network_address\x18\x18 \x01(\tH\x11R\x17nextEpochNetworkAddress\x88\x01\x01\x128\n" +
	"\x16next_epoch_p2p_address\x18\x19 \x01(\tH\x12R\x13nextEpochP2pAddress\x88\x01\x01\x12@\n" +
	"\x1anext_epoch_primary_address\x18\x1a \x01(\tH\x13R\x17nextEpochPrimaryAddress\x88\x01\x01\x12>\n" +
	"\x19next_epoch_worker_address\x18\x1b \x01(\tH\x14R\x16nextEpochWorkerAddress\x88\x01\x01\x12N\n" +
	"\x15metadata_extra_fields\x18\x1c \x01(\v2\x15.sui.rpc.v2.MoveTableH\x15R\x13metadataExtraFields\x88\x01\x01\x12&\n" +
	"\fvoting_power\x18\x1d \x01(\x04H\x16R\vvotingPower\x88\x01\x01\x12-\n" +
	"\x10operation_cap_id\x18\x1e \x01(\tH\x17R\x0eoperationCapId\x88\x01\x01\x12 \n" +
	"\tgas_price\x18\x1f \x01(\x04H\x18R\bgasPrice\x88\x01\x01\x12?\n" +
	"\fstaking_pool\x18  \x01(\v2\x17.sui.rpc.v2.StakingPoolH\x19R\vstakingPool\x88\x01\x01\x12,\n" +
	"\x0fcommission_rate\x18! \x01(\x04H\x1aR\x0ecommissionRate\x88\x01\x01\x12-\n" +
	"\x10next_epoch_stake\x18\" \x01(\x04H\x1bR\x0enextEpochStake\x88\x01\x01\x124\n" +
	"\x14next_epoch_gas_price\x18# \x01(\x04H\x1cR\x11nextEpochGasPrice\x88\x01\x01\x12@\n" +
	"\x1anext_epoch_commission_rate\x18$ \x01(\x04H\x1dR\x17nextEpochCommissionRate\x88\x01\x01\x12=\n" +
	"\fextra_fields\x18% \x01(\v2\x15.sui.rpc.v2.MoveTableH\x1eR\vextraFields\x88\x01\x01B\a\n" +
	"\x05_nameB\n" +
	"\n" +
	"\b_addressB\x0e\n" +
	"\f_descriptionB\f\n" +
	"\n" +
	"_image_urlB\x0e\n" +
	"\f_project_urlB\x16\n" +
	"\x14_protocol_public_keyB\x16\n" +
	"\x14_proof_of_possessionB\x15\n" +
	"\x13_network_public_keyB\x14\n" +
	"\x12_worker_public_keyB\x12\n" +
	"\x10_network_addressB\x0e\n" +
	"\f_p2p_addressB\x12\n" +
	"\x10_primary_addressB\x11\n" +
	"\x0f_worker_addressB!\n" +
	"\x1f_next_epoch_protocol_public_keyB!\n" +
	"\x1f_next_epoch_proof_of_possessionB \n" +
	"\x1e_next_epoch_network_public_keyB\x1f\n" +
	"\x1d_next_epoch_worker_public_keyB\x1d\n" +
	"\x1b_next_epoch_network_addressB\x19\n" +
	"\x17_next_epoch_p2p_addressB\x1d\n" +
	"\x1b_next_epoch_primary_addressB\x1c\n" +
	"\x1a_next_epoch_worker_addressB\x18\n" +
	"\x16_metadata_extra_fieldsB\x0f\n" +
	"\r_voting_powerB\x13\n" +
	"\x11_operation_cap_idB\f\n" +
	"\n" +
	"_gas_priceB\x0f\n" +
	"\r_staking_poolB\x12\n" +
	"\x10_commission_rateB\x13\n" +
	"\x11_next_epoch_stakeB\x17\n" +
	"\x15_next_epoch_gas_priceB\x1d\n" +
	"\x1b_next_epoch_commission_rateB\x0f\n" +
	"\r_extra_fieldsJ\x04\b\x06\x10\aJ\x04\b\t\x10\n" +
	"J\x04\b\v\x10\fJ\x04\b\x11\x10\x12J\x04\b\x14\x10\x15J\x04\b\x16\x10\x17\"\x99\x06\n" +
	"\vStakingPool\x12\x13\n" +
	"\x02id\x18\x01 \x01(\tH\x00R\x02id\x88\x01\x01\x12.\n" +
	"\x10activation_epoch\x18\x02 \x01(\x04H\x01R\x0factivationEpoch\x88\x01\x01\x122\n" +
	"\x12deactivation_epoch\x18\x03 \x01(\x04H\x02R\x11deactivationEpoch\x88\x01\x01\x12$\n" +
	"\vsui_balance\x18\x04 \x01(\x04H\x03R\n" +
	"suiBalance\x88\x01\x01\x12&\n" +
	"\frewards_pool\x18\x05 \x01(\x04H\x04R\vrewardsPool\x88\x01\x01\x121\n" +
	"\x12pool_token_balance\x18\x06 \x01(\x04H\x05R\x10poolTokenBalance\x88\x01\x01\x12A\n" +
	"\x0eexchange_rates\x18\a \x01(\v2\x15.sui.rpc.v2.MoveTableH\x06R\rexchangeRates\x88\x01\x01\x12(\n" +
	"\rpending_stake\x18\b \x01(\x04H\aR\fpendingStake\x88\x01\x01\x12@\n" +
	"\x1apending_total_sui_withdraw\x18\t \x01(\x04H\bR\x17pendingTotalSuiWithdraw\x88\x01\x01\x12B\n" +
	"\x1bpending_pool_token_withdraw\x18\n" +
	" \x01(\x04H\tR\x18pendingPoolTokenWithdraw\x88\x01\x01\x12=\n" +
	"\fextra_fields\x18\v \x01(\v2\x15.sui.rpc.v2.MoveTableH\n" +
	"R\vextraFields\x88\x01\x01B\x05\n" +
	"\x03_idB\x13\n" +
	"\x11_activation_epochB\x15\n" +
	"\x13_deactivation_epochB\x0e\n" +
	"\f_sui_balanceB\x0f\n" +
	"\r_rewards_poolB\x15\n" +
	"\x13_pool_token_balanceB\x11\n" +
	"\x0f_exchange_ratesB\x10\n" +
	"\x0e_pending_stakeB\x1d\n" +
	"\x1b_pending_total_sui_withdrawB\x1e\n" +
	"\x1c_pending_pool_token_withdrawB\x0f\n" +
	"\r_extra_fieldsb\x06proto3"

var (
	file_sui_rpc_v2_system_state_proto_rawDescOnce sync.Once
	file_sui_rpc_v2_system_state_proto_rawDescData []byte
)

func file_sui_rpc_v2_system_state_proto_rawDescGZIP() []byte {
	file_sui_rpc_v2_system_state_proto_rawDescOnce.Do(func() {
		file_sui_rpc_v2_system_state_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sui_rpc_v2_system_state_proto_rawDesc), len(file_sui_rpc_v2_system_state_proto_rawDesc)))
	})
	return file_sui_rpc_v2_system_state_proto_rawDescData
}

var file_sui_rpc_v2_system_state_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_sui_rpc_v2_system_state_proto_goTypes = []any{
	(*SystemState)(nil),           // 0: sui.rpc.v2.SystemState
	(*ValidatorReportRecord)(nil), // 1: sui.rpc.v2.ValidatorReportRecord
	(*SystemParameters)(nil),      // 2: sui.rpc.v2.SystemParameters
	(*MoveTable)(nil),             // 3: sui.rpc.v2.MoveTable
	(*StakeSubsidy)(nil),          // 4: sui.rpc.v2.StakeSubsidy
	(*StorageFund)(nil),           // 5: sui.rpc.v2.StorageFund
	(*ValidatorSet)(nil),          // 6: sui.rpc.v2.ValidatorSet
	(*Validator)(nil),             // 7: sui.rpc.v2.Validator
	(*StakingPool)(nil),           // 8: sui.rpc.v2.StakingPool
	nil,                           // 9: sui.rpc.v2.ValidatorSet.AtRiskValidatorsEntry
}
var file_sui_rpc_v2_system_state_proto_depIdxs = []int32{
	6,  // 0: sui.rpc.v2.SystemState.validators:type_name -> sui.rpc.v2.ValidatorSet
	5,  // 1: sui.rpc.v2.SystemState.storage_fund:type_name -> sui.rpc.v2.StorageFund
	2,  // 2: sui.rpc.v2.SystemState.parameters:type_name -> sui.rpc.v2.SystemParameters
	1,  // 3: sui.rpc.v2.SystemState.validator_report_records:type_name -> sui.rpc.v2.ValidatorReportRecord
	4,  // 4: sui.rpc.v2.SystemState.stake_subsidy:type_name -> sui.rpc.v2.StakeSubsidy
	3,  // 5: sui.rpc.v2.SystemState.extra_fields:type_name -> sui.rpc.v2.MoveTable
	3,  // 6: sui.rpc.v2.SystemParameters.extra_fields:type_name -> sui.rpc.v2.MoveTable
	3,  // 7: sui.rpc.v2.StakeSubsidy.extra_fields:type_name -> sui.rpc.v2.MoveTable
	7,  // 8: sui.rpc.v2.ValidatorSet.active_validators:type_name -> sui.rpc.v2.Validator
	3,  // 9: sui.rpc.v2.ValidatorSet.pending_active_validators:type_name -> sui.rpc.v2.MoveTable
	3,  // 10: sui.rpc.v2.ValidatorSet.staking_pool_mappings:type_name -> sui.rpc.v2.MoveTable
	3,  // 11: sui.rpc.v2.ValidatorSet.inactive_validators:type_name -> sui.rpc.v2.MoveTable
	3,  // 12: sui.rpc.v2.ValidatorSet.validator_candidates:type_name -> sui.rpc.v2.MoveTable
	9,  // 13: sui.rpc.v2.ValidatorSet.at_risk_validators:type_name -> sui.rpc.v2.ValidatorSet.AtRiskValidatorsEntry
	3,  // 14: sui.rpc.v2.ValidatorSet.extra_fields:type_name -> sui.rpc.v2.MoveTable
	3,  // 15: sui.rpc.v2.Validator.metadata_extra_fields:type_name -> sui.rpc.v2.MoveTable
	8,  // 16: sui.rpc.v2.Validator.staking_pool:type_name -> sui.rpc.v2.StakingPool
	3,  // 17: sui.rpc.v2.Validator.extra_fields:type_name -> sui.rpc.v2.MoveTable
	3,  // 18: sui.rpc.v2.StakingPool.exchange_rates:type_name -> sui.rpc.v2.MoveTable
	3,  // 19: sui.rpc.v2.StakingPool.extra_fields:type_name -> sui.rpc.v2.MoveTable
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_sui_rpc_v2_system_state_proto_init() }
func file_sui_rpc_v2_system_state_proto_init() {
	if File_sui_rpc_v2_system_state_proto != nil {
		return
	}
	file_sui_rpc_v2_system_state_proto_msgTypes[0].OneofWrappers = []any{}
	file_sui_rpc_v2_system_state_proto_msgTypes[1].OneofWrappers = []any{}
	file_sui_rpc_v2_system_state_proto_msgTypes[2].OneofWrappers = []any{}
	file_sui_rpc_v2_system_state_proto_msgTypes[3].OneofWrappers = []any{}
	file_sui_rpc_v2_system_state_proto_msgTypes[4].OneofWrappers = []any{}
	file_sui_rpc_v2_system_state_proto_msgTypes[5].OneofWrappers = []any{}
	file_sui_rpc_v2_system_state_proto_msgTypes[6].OneofWrappers = []any{}
	file_sui_rpc_v2_system_state_proto_msgTypes[7].OneofWrappers = []any{}
	file_sui_rpc_v2_system_state_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sui_rpc_v2_system_state_proto_rawDesc), len(file_sui_rpc_v2_system_state_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sui_rpc_v2_system_state_proto_goTypes,
		DependencyIndexes: file_sui_rpc_v2_system_state_proto_depIdxs,
		MessageInfos:      file_sui_rpc_v2_system_state_proto_msgTypes,
	}.Build()
	File_sui_rpc_v2_system_state_proto = out.File
	file_sui_rpc_v2_system_state_proto_goTypes = nil
	file_sui_rpc_v2_system_state_proto_depIdxs = nil
}
