// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.4
// source: sui/rpc/v2/signature_verification_service.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VerifySignatureRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The message to verify against.
	//
	// Today the only supported message types are `PersonalMessage` and
	// `TransactionData` and the `Bcs.name` must be set to indicate which type of
	// message is being verified.
	Message *Bcs `protobuf:"bytes,1,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// The signature to verify.
	Signature *UserSignature `protobuf:"bytes,2,opt,name=signature,proto3,oneof" json:"signature,omitempty"`
	// Optional. Address to validate against the provided signature.
	//
	// If provided, this address will be compared against the the address derived
	// from the provide signature and a successful response will only be returned
	// if they match.
	Address *string `protobuf:"bytes,3,opt,name=address,proto3,oneof" json:"address,omitempty"`
	// The set of JWKs to use when verifying Zklogin signatures.
	// If this is empty the current set of valid JWKs stored onchain will be used
	Jwks          []*ActiveJwk `protobuf:"bytes,4,rep,name=jwks,proto3" json:"jwks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifySignatureRequest) Reset() {
	*x = VerifySignatureRequest{}
	mi := &file_sui_rpc_v2_signature_verification_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifySignatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifySignatureRequest) ProtoMessage() {}

func (x *VerifySignatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_signature_verification_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifySignatureRequest.ProtoReflect.Descriptor instead.
func (*VerifySignatureRequest) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_signature_verification_service_proto_rawDescGZIP(), []int{0}
}

func (x *VerifySignatureRequest) GetMessage() *Bcs {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *VerifySignatureRequest) GetSignature() *UserSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *VerifySignatureRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *VerifySignatureRequest) GetJwks() []*ActiveJwk {
	if x != nil {
		return x.Jwks
	}
	return nil
}

type VerifySignatureResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Indicates if the provided signature was valid given the requested parameters.
	IsValid *bool `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3,oneof" json:"is_valid,omitempty"`
	// If `is_valid` is `false`, this is the reason for why the signature verification failed.
	Reason        *string `protobuf:"bytes,2,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifySignatureResponse) Reset() {
	*x = VerifySignatureResponse{}
	mi := &file_sui_rpc_v2_signature_verification_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifySignatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifySignatureResponse) ProtoMessage() {}

func (x *VerifySignatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_signature_verification_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifySignatureResponse.ProtoReflect.Descriptor instead.
func (*VerifySignatureResponse) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_signature_verification_service_proto_rawDescGZIP(), []int{1}
}

func (x *VerifySignatureResponse) GetIsValid() bool {
	if x != nil && x.IsValid != nil {
		return *x.IsValid
	}
	return false
}

func (x *VerifySignatureResponse) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

var File_sui_rpc_v2_signature_verification_service_proto protoreflect.FileDescriptor

const file_sui_rpc_v2_signature_verification_service_proto_rawDesc = "" +
	"\n" +
	"/sui/rpc/v2/signature_verification_service.proto\x12\n" +
	"sui.rpc.v2\x1a\x14sui/rpc/v2/bcs.proto\x1a\x1asui/rpc/v2/signature.proto\x1a\x1csui/rpc/v2/transaction.proto\"\xf6\x01\n" +
	"\x16VerifySignatureRequest\x12.\n" +
	"\amessage\x18\x01 \x01(\v2\x0f.sui.rpc.v2.BcsH\x00R\amessage\x88\x01\x01\x12<\n" +
	"\tsignature\x18\x02 \x01(\v2\x19.sui.rpc.v2.UserSignatureH\x01R\tsignature\x88\x01\x01\x12\x1d\n" +
	"\aaddress\x18\x03 \x01(\tH\x02R\aaddress\x88\x01\x01\x12)\n" +
	"\x04jwks\x18\x04 \x03(\v2\x15.sui.rpc.v2.ActiveJwkR\x04jwksB\n" +
	"\n" +
	"\b_messageB\f\n" +
	"\n" +
	"_signatureB\n" +
	"\n" +
	"\b_address\"n\n" +
	"\x17VerifySignatureResponse\x12\x1e\n" +
	"\bis_valid\x18\x01 \x01(\bH\x00R\aisValid\x88\x01\x01\x12\x1b\n" +
	"\x06reason\x18\x02 \x01(\tH\x01R\x06reason\x88\x01\x01B\v\n" +
	"\t_is_validB\t\n" +
	"\a_reason2z\n" +
	"\x1cSignatureVerificationService\x12Z\n" +
	"\x0fVerifySignature\x12\".sui.rpc.v2.VerifySignatureRequest\x1a#.sui.rpc.v2.VerifySignatureResponseb\x06proto3"

var (
	file_sui_rpc_v2_signature_verification_service_proto_rawDescOnce sync.Once
	file_sui_rpc_v2_signature_verification_service_proto_rawDescData []byte
)

func file_sui_rpc_v2_signature_verification_service_proto_rawDescGZIP() []byte {
	file_sui_rpc_v2_signature_verification_service_proto_rawDescOnce.Do(func() {
		file_sui_rpc_v2_signature_verification_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sui_rpc_v2_signature_verification_service_proto_rawDesc), len(file_sui_rpc_v2_signature_verification_service_proto_rawDesc)))
	})
	return file_sui_rpc_v2_signature_verification_service_proto_rawDescData
}

var file_sui_rpc_v2_signature_verification_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_sui_rpc_v2_signature_verification_service_proto_goTypes = []any{
	(*VerifySignatureRequest)(nil),  // 0: sui.rpc.v2.VerifySignatureRequest
	(*VerifySignatureResponse)(nil), // 1: sui.rpc.v2.VerifySignatureResponse
	(*Bcs)(nil),                     // 2: sui.rpc.v2.Bcs
	(*UserSignature)(nil),           // 3: sui.rpc.v2.UserSignature
	(*ActiveJwk)(nil),               // 4: sui.rpc.v2.ActiveJwk
}
var file_sui_rpc_v2_signature_verification_service_proto_depIdxs = []int32{
	2, // 0: sui.rpc.v2.VerifySignatureRequest.message:type_name -> sui.rpc.v2.Bcs
	3, // 1: sui.rpc.v2.VerifySignatureRequest.signature:type_name -> sui.rpc.v2.UserSignature
	4, // 2: sui.rpc.v2.VerifySignatureRequest.jwks:type_name -> sui.rpc.v2.ActiveJwk
	0, // 3: sui.rpc.v2.SignatureVerificationService.VerifySignature:input_type -> sui.rpc.v2.VerifySignatureRequest
	1, // 4: sui.rpc.v2.SignatureVerificationService.VerifySignature:output_type -> sui.rpc.v2.VerifySignatureResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_sui_rpc_v2_signature_verification_service_proto_init() }
func file_sui_rpc_v2_signature_verification_service_proto_init() {
	if File_sui_rpc_v2_signature_verification_service_proto != nil {
		return
	}
	file_sui_rpc_v2_bcs_proto_init()
	file_sui_rpc_v2_signature_proto_init()
	file_sui_rpc_v2_transaction_proto_init()
	file_sui_rpc_v2_signature_verification_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_sui_rpc_v2_signature_verification_service_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sui_rpc_v2_signature_verification_service_proto_rawDesc), len(file_sui_rpc_v2_signature_verification_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sui_rpc_v2_signature_verification_service_proto_goTypes,
		DependencyIndexes: file_sui_rpc_v2_signature_verification_service_proto_depIdxs,
		MessageInfos:      file_sui_rpc_v2_signature_verification_service_proto_msgTypes,
	}.Build()
	File_sui_rpc_v2_signature_verification_service_proto = out.File
	file_sui_rpc_v2_signature_verification_service_proto_goTypes = nil
	file_sui_rpc_v2_signature_verification_service_proto_depIdxs = nil
}
