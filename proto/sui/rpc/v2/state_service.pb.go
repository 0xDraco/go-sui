// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.4
// source: sui/rpc/v2/state_service.proto

package v2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Information about the state of the coin's MetadataCap
type CoinMetadata_MetadataCapState int32

const (
	// Indicates the state of the MetadataCap is unknown.
	// Set when the coin has not been migrated to the CoinRegistry.
	CoinMetadata_METADATA_CAP_STATE_UNKNOWN CoinMetadata_MetadataCapState = 0
	// Indicates the MetadataCap has been claimed.
	CoinMetadata_CLAIMED CoinMetadata_MetadataCapState = 1
	// Indicates the MetadataCap has not been claimed.
	CoinMetadata_UNCLAIMED CoinMetadata_MetadataCapState = 2
	// Indicates the MetadataCap has been deleted.
	CoinMetadata_DELETED CoinMetadata_MetadataCapState = 3
)

// Enum value maps for CoinMetadata_MetadataCapState.
var (
	CoinMetadata_MetadataCapState_name = map[int32]string{
		0: "METADATA_CAP_STATE_UNKNOWN",
		1: "CLAIMED",
		2: "UNCLAIMED",
		3: "DELETED",
	}
	CoinMetadata_MetadataCapState_value = map[string]int32{
		"METADATA_CAP_STATE_UNKNOWN": 0,
		"CLAIMED":                    1,
		"UNCLAIMED":                  2,
		"DELETED":                    3,
	}
)

func (x CoinMetadata_MetadataCapState) Enum() *CoinMetadata_MetadataCapState {
	p := new(CoinMetadata_MetadataCapState)
	*p = x
	return p
}

func (x CoinMetadata_MetadataCapState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoinMetadata_MetadataCapState) Descriptor() protoreflect.EnumDescriptor {
	return file_sui_rpc_v2_state_service_proto_enumTypes[0].Descriptor()
}

func (CoinMetadata_MetadataCapState) Type() protoreflect.EnumType {
	return &file_sui_rpc_v2_state_service_proto_enumTypes[0]
}

func (x CoinMetadata_MetadataCapState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoinMetadata_MetadataCapState.Descriptor instead.
func (CoinMetadata_MetadataCapState) EnumDescriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{2, 0}
}

// Supply state of a coin, matching the Move SupplyState enum
type CoinTreasury_SupplyState int32

const (
	// Supply is unknown or TreasuryCap still exists (minting still possible)
	CoinTreasury_SUPPLY_STATE_UNKNOWN CoinTreasury_SupplyState = 0
	// Supply is fixed (TreasuryCap consumed, no more minting possible)
	CoinTreasury_FIXED CoinTreasury_SupplyState = 1
	// Supply can only decrease (burning allowed, minting not allowed)
	CoinTreasury_BURN_ONLY CoinTreasury_SupplyState = 2
)

// Enum value maps for CoinTreasury_SupplyState.
var (
	CoinTreasury_SupplyState_name = map[int32]string{
		0: "SUPPLY_STATE_UNKNOWN",
		1: "FIXED",
		2: "BURN_ONLY",
	}
	CoinTreasury_SupplyState_value = map[string]int32{
		"SUPPLY_STATE_UNKNOWN": 0,
		"FIXED":                1,
		"BURN_ONLY":            2,
	}
)

func (x CoinTreasury_SupplyState) Enum() *CoinTreasury_SupplyState {
	p := new(CoinTreasury_SupplyState)
	*p = x
	return p
}

func (x CoinTreasury_SupplyState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoinTreasury_SupplyState) Descriptor() protoreflect.EnumDescriptor {
	return file_sui_rpc_v2_state_service_proto_enumTypes[1].Descriptor()
}

func (CoinTreasury_SupplyState) Type() protoreflect.EnumType {
	return &file_sui_rpc_v2_state_service_proto_enumTypes[1]
}

func (x CoinTreasury_SupplyState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoinTreasury_SupplyState.Descriptor instead.
func (CoinTreasury_SupplyState) EnumDescriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{3, 0}
}

// Indicates the state of the regulation of the coin.
type RegulatedCoinMetadata_CoinRegulatedState int32

const (
	// Indicates the regulation state of the coin is unknown.
	// This is set when a coin has not been migrated to the
	// coin registry and has no `0x2::coin::RegulatedCoinMetadata`
	// object.
	RegulatedCoinMetadata_COIN_REGULATED_STATE_UNKNOWN RegulatedCoinMetadata_CoinRegulatedState = 0
	// Indicates a coin is regulated. RegulatedCoinMetadata will be populated.
	RegulatedCoinMetadata_REGULATED RegulatedCoinMetadata_CoinRegulatedState = 1
	// Indicates a coin is unregulated.
	RegulatedCoinMetadata_UNREGULATED RegulatedCoinMetadata_CoinRegulatedState = 2
)

// Enum value maps for RegulatedCoinMetadata_CoinRegulatedState.
var (
	RegulatedCoinMetadata_CoinRegulatedState_name = map[int32]string{
		0: "COIN_REGULATED_STATE_UNKNOWN",
		1: "REGULATED",
		2: "UNREGULATED",
	}
	RegulatedCoinMetadata_CoinRegulatedState_value = map[string]int32{
		"COIN_REGULATED_STATE_UNKNOWN": 0,
		"REGULATED":                    1,
		"UNREGULATED":                  2,
	}
)

func (x RegulatedCoinMetadata_CoinRegulatedState) Enum() *RegulatedCoinMetadata_CoinRegulatedState {
	p := new(RegulatedCoinMetadata_CoinRegulatedState)
	*p = x
	return p
}

func (x RegulatedCoinMetadata_CoinRegulatedState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegulatedCoinMetadata_CoinRegulatedState) Descriptor() protoreflect.EnumDescriptor {
	return file_sui_rpc_v2_state_service_proto_enumTypes[2].Descriptor()
}

func (RegulatedCoinMetadata_CoinRegulatedState) Type() protoreflect.EnumType {
	return &file_sui_rpc_v2_state_service_proto_enumTypes[2]
}

func (x RegulatedCoinMetadata_CoinRegulatedState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegulatedCoinMetadata_CoinRegulatedState.Descriptor instead.
func (RegulatedCoinMetadata_CoinRegulatedState) EnumDescriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{4, 0}
}

type DynamicField_DynamicFieldKind int32

const (
	DynamicField_DYNAMIC_FIELD_KIND_UNKNOWN DynamicField_DynamicFieldKind = 0
	DynamicField_FIELD                      DynamicField_DynamicFieldKind = 1
	DynamicField_OBJECT                     DynamicField_DynamicFieldKind = 2
)

// Enum value maps for DynamicField_DynamicFieldKind.
var (
	DynamicField_DynamicFieldKind_name = map[int32]string{
		0: "DYNAMIC_FIELD_KIND_UNKNOWN",
		1: "FIELD",
		2: "OBJECT",
	}
	DynamicField_DynamicFieldKind_value = map[string]int32{
		"DYNAMIC_FIELD_KIND_UNKNOWN": 0,
		"FIELD":                      1,
		"OBJECT":                     2,
	}
)

func (x DynamicField_DynamicFieldKind) Enum() *DynamicField_DynamicFieldKind {
	p := new(DynamicField_DynamicFieldKind)
	*p = x
	return p
}

func (x DynamicField_DynamicFieldKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DynamicField_DynamicFieldKind) Descriptor() protoreflect.EnumDescriptor {
	return file_sui_rpc_v2_state_service_proto_enumTypes[3].Descriptor()
}

func (DynamicField_DynamicFieldKind) Type() protoreflect.EnumType {
	return &file_sui_rpc_v2_state_service_proto_enumTypes[3]
}

func (x DynamicField_DynamicFieldKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DynamicField_DynamicFieldKind.Descriptor instead.
func (DynamicField_DynamicFieldKind) EnumDescriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{12, 0}
}

// Request message for `NodeService.GetCoinInfo`.
type GetCoinInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The coin type to request information about
	CoinType      *string `protobuf:"bytes,1,opt,name=coin_type,json=coinType,proto3,oneof" json:"coin_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCoinInfoRequest) Reset() {
	*x = GetCoinInfoRequest{}
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinInfoRequest) ProtoMessage() {}

func (x *GetCoinInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinInfoRequest.ProtoReflect.Descriptor instead.
func (*GetCoinInfoRequest) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetCoinInfoRequest) GetCoinType() string {
	if x != nil && x.CoinType != nil {
		return *x.CoinType
	}
	return ""
}

// Response message for `NodeService.GetCoinInfo`.
type GetCoinInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The coin type.
	CoinType *string `protobuf:"bytes,1,opt,name=coin_type,json=coinType,proto3,oneof" json:"coin_type,omitempty"`
	// This field will be populated with information about this coin
	// type's `0x2::coin::CoinMetadata` if it exists and has not been wrapped.
	Metadata *CoinMetadata `protobuf:"bytes,2,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// This field will be populated with information about this coin
	// type's `0x2::coin::TreasuryCap` if it exists and has not been wrapped.
	Treasury *CoinTreasury `protobuf:"bytes,3,opt,name=treasury,proto3,oneof" json:"treasury,omitempty"`
	// If this coin type is a regulated coin, this field will be
	// populated with information either from its Currency object
	// in the CoinRegistry, or from its `0x2::coin::RegulatedCoinMetadata`
	// object for coins that have not been migrated to the CoinRegistry
	//
	// If this coin is not known to be regulated, only the
	// coin_regulated_state field will be populated.
	RegulatedMetadata *RegulatedCoinMetadata `protobuf:"bytes,4,opt,name=regulated_metadata,json=regulatedMetadata,proto3,oneof" json:"regulated_metadata,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetCoinInfoResponse) Reset() {
	*x = GetCoinInfoResponse{}
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoinInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinInfoResponse) ProtoMessage() {}

func (x *GetCoinInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinInfoResponse.ProtoReflect.Descriptor instead.
func (*GetCoinInfoResponse) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetCoinInfoResponse) GetCoinType() string {
	if x != nil && x.CoinType != nil {
		return *x.CoinType
	}
	return ""
}

func (x *GetCoinInfoResponse) GetMetadata() *CoinMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetCoinInfoResponse) GetTreasury() *CoinTreasury {
	if x != nil {
		return x.Treasury
	}
	return nil
}

func (x *GetCoinInfoResponse) GetRegulatedMetadata() *RegulatedCoinMetadata {
	if x != nil {
		return x.RegulatedMetadata
	}
	return nil
}

// Metadata for a coin type
type CoinMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ObjectId of the `0x2::coin::CoinMetadata` object or
	// 0x2::sui::coin_registry::Currency object (when registered with CoinRegistry).
	Id *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Number of decimal places to coin uses.
	Decimals *uint32 `protobuf:"varint,2,opt,name=decimals,proto3,oneof" json:"decimals,omitempty"`
	// Name for the token
	Name *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Symbol for the token
	Symbol *string `protobuf:"bytes,4,opt,name=symbol,proto3,oneof" json:"symbol,omitempty"`
	// Description of the token
	Description *string `protobuf:"bytes,5,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// URL for the token logo
	IconUrl *string `protobuf:"bytes,6,opt,name=icon_url,json=iconUrl,proto3,oneof" json:"icon_url,omitempty"`
	// The MetadataCap ID if it has been claimed for this coin type.
	// This capability allows updating the coin's metadata fields.
	// Only populated when metadata is from CoinRegistry.
	MetadataCapId *string `protobuf:"bytes,7,opt,name=metadata_cap_id,json=metadataCapId,proto3,oneof" json:"metadata_cap_id,omitempty"`
	// State of the MetadataCap for this coin type.
	MetadataCapState *CoinMetadata_MetadataCapState `protobuf:"varint,8,opt,name=metadata_cap_state,json=metadataCapState,proto3,enum=sui.rpc.v2.CoinMetadata_MetadataCapState,oneof" json:"metadata_cap_state,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CoinMetadata) Reset() {
	*x = CoinMetadata{}
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinMetadata) ProtoMessage() {}

func (x *CoinMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinMetadata.ProtoReflect.Descriptor instead.
func (*CoinMetadata) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{2}
}

func (x *CoinMetadata) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *CoinMetadata) GetDecimals() uint32 {
	if x != nil && x.Decimals != nil {
		return *x.Decimals
	}
	return 0
}

func (x *CoinMetadata) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CoinMetadata) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *CoinMetadata) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CoinMetadata) GetIconUrl() string {
	if x != nil && x.IconUrl != nil {
		return *x.IconUrl
	}
	return ""
}

func (x *CoinMetadata) GetMetadataCapId() string {
	if x != nil && x.MetadataCapId != nil {
		return *x.MetadataCapId
	}
	return ""
}

func (x *CoinMetadata) GetMetadataCapState() CoinMetadata_MetadataCapState {
	if x != nil && x.MetadataCapState != nil {
		return *x.MetadataCapState
	}
	return CoinMetadata_METADATA_CAP_STATE_UNKNOWN
}

// Information about a coin type's `0x2::coin::TreasuryCap` and its total available supply
type CoinTreasury struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ObjectId of the `0x2::coin::TreasuryCap` object.
	Id *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Total available supply for this coin type.
	TotalSupply *uint64 `protobuf:"varint,2,opt,name=total_supply,json=totalSupply,proto3,oneof" json:"total_supply,omitempty"`
	// Supply state indicating if the supply is fixed or can still be minted
	SupplyState   *CoinTreasury_SupplyState `protobuf:"varint,3,opt,name=supply_state,json=supplyState,proto3,enum=sui.rpc.v2.CoinTreasury_SupplyState,oneof" json:"supply_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoinTreasury) Reset() {
	*x = CoinTreasury{}
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinTreasury) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinTreasury) ProtoMessage() {}

func (x *CoinTreasury) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinTreasury.ProtoReflect.Descriptor instead.
func (*CoinTreasury) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{3}
}

func (x *CoinTreasury) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *CoinTreasury) GetTotalSupply() uint64 {
	if x != nil && x.TotalSupply != nil {
		return *x.TotalSupply
	}
	return 0
}

func (x *CoinTreasury) GetSupplyState() CoinTreasury_SupplyState {
	if x != nil && x.SupplyState != nil {
		return *x.SupplyState
	}
	return CoinTreasury_SUPPLY_STATE_UNKNOWN
}

// Information about a regulated coin, which indicates that it makes use of the transfer deny list.
type RegulatedCoinMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ObjectId of the `0x2::coin::RegulatedCoinMetadata` object.
	// Only present for coins that have not been migrated to CoinRegistry.
	Id *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// The ID of the coin's `CoinMetadata` or `CoinData` object.
	CoinMetadataObject *string `protobuf:"bytes,2,opt,name=coin_metadata_object,json=coinMetadataObject,proto3,oneof" json:"coin_metadata_object,omitempty"`
	// The ID of the coin's `DenyCap` object.
	DenyCapObject *string `protobuf:"bytes,3,opt,name=deny_cap_object,json=denyCapObject,proto3,oneof" json:"deny_cap_object,omitempty"`
	// Whether the coin can be globally paused
	AllowGlobalPause *bool `protobuf:"varint,4,opt,name=allow_global_pause,json=allowGlobalPause,proto3,oneof" json:"allow_global_pause,omitempty"`
	// Variant of the regulated coin metadata
	Variant *uint32 `protobuf:"varint,5,opt,name=variant,proto3,oneof" json:"variant,omitempty"`
	// Indicates the coin's regulated state.
	CoinRegulatedState *RegulatedCoinMetadata_CoinRegulatedState `protobuf:"varint,6,opt,name=coin_regulated_state,json=coinRegulatedState,proto3,enum=sui.rpc.v2.RegulatedCoinMetadata_CoinRegulatedState,oneof" json:"coin_regulated_state,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RegulatedCoinMetadata) Reset() {
	*x = RegulatedCoinMetadata{}
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegulatedCoinMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegulatedCoinMetadata) ProtoMessage() {}

func (x *RegulatedCoinMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegulatedCoinMetadata.ProtoReflect.Descriptor instead.
func (*RegulatedCoinMetadata) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{4}
}

func (x *RegulatedCoinMetadata) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *RegulatedCoinMetadata) GetCoinMetadataObject() string {
	if x != nil && x.CoinMetadataObject != nil {
		return *x.CoinMetadataObject
	}
	return ""
}

func (x *RegulatedCoinMetadata) GetDenyCapObject() string {
	if x != nil && x.DenyCapObject != nil {
		return *x.DenyCapObject
	}
	return ""
}

func (x *RegulatedCoinMetadata) GetAllowGlobalPause() bool {
	if x != nil && x.AllowGlobalPause != nil {
		return *x.AllowGlobalPause
	}
	return false
}

func (x *RegulatedCoinMetadata) GetVariant() uint32 {
	if x != nil && x.Variant != nil {
		return *x.Variant
	}
	return 0
}

func (x *RegulatedCoinMetadata) GetCoinRegulatedState() RegulatedCoinMetadata_CoinRegulatedState {
	if x != nil && x.CoinRegulatedState != nil {
		return *x.CoinRegulatedState
	}
	return RegulatedCoinMetadata_COIN_REGULATED_STATE_UNKNOWN
}

// Request message for `LiveDataService.GetBalance`.
type GetBalanceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The owner's Sui address.
	Owner *string `protobuf:"bytes,1,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	// Required. The type names for the coin (e.g., 0x2::sui::SUI).
	CoinType      *string `protobuf:"bytes,2,opt,name=coin_type,json=coinType,proto3,oneof" json:"coin_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBalanceRequest) Reset() {
	*x = GetBalanceRequest{}
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceRequest) ProtoMessage() {}

func (x *GetBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetBalanceRequest) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetBalanceRequest) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *GetBalanceRequest) GetCoinType() string {
	if x != nil && x.CoinType != nil {
		return *x.CoinType
	}
	return ""
}

// Response message for `LiveDataService.GetBalance`.
// Return the total coin balance for one coin type, owned by the address owner.
type GetBalanceResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The balance information for the requested coin type.
	Balance       *Balance `protobuf:"bytes,1,opt,name=balance,proto3,oneof" json:"balance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBalanceResponse) Reset() {
	*x = GetBalanceResponse{}
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceResponse) ProtoMessage() {}

func (x *GetBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetBalanceResponse) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetBalanceResponse) GetBalance() *Balance {
	if x != nil {
		return x.Balance
	}
	return nil
}

// Request message for `LiveDataService.ListBalances`.
type ListBalancesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The owner's Sui address.
	Owner *string `protobuf:"bytes,1,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	// The maximum number of balance entries to return. The service may return fewer than this value.
	// If unspecified, at most `50` entries will be returned.
	// The maximum value is `1000`; values above `1000` will be coerced to `1000`.
	PageSize *uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// A page token, received from a previous `ListBalances` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListBalances` must
	// match the call that provided the page token.
	PageToken     []byte `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBalancesRequest) Reset() {
	*x = ListBalancesRequest{}
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBalancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBalancesRequest) ProtoMessage() {}

func (x *ListBalancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBalancesRequest.ProtoReflect.Descriptor instead.
func (*ListBalancesRequest) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListBalancesRequest) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *ListBalancesRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListBalancesRequest) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

// Response message for `LiveDataService.ListBalances`.
// Return the total coin balance for all coin types, owned by the address owner.
type ListBalancesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of coin types and their respective balances.
	Balances []*Balance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken []byte `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3,oneof" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListBalancesResponse) Reset() {
	*x = ListBalancesResponse{}
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBalancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBalancesResponse) ProtoMessage() {}

func (x *ListBalancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBalancesResponse.ProtoReflect.Descriptor instead.
func (*ListBalancesResponse) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListBalancesResponse) GetBalances() []*Balance {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *ListBalancesResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

// Balance information for a specific coin type.
type Balance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of the coin (e.g., 0x2::sui::SUI).
	CoinType *string `protobuf:"bytes,1,opt,name=coin_type,json=coinType,proto3,oneof" json:"coin_type,omitempty"`
	// Shows the total balance of the coin in its smallest unit.
	Balance       *uint64 `protobuf:"varint,3,opt,name=balance,proto3,oneof" json:"balance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Balance) Reset() {
	*x = Balance{}
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance) ProtoMessage() {}

func (x *Balance) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance.ProtoReflect.Descriptor instead.
func (*Balance) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{9}
}

func (x *Balance) GetCoinType() string {
	if x != nil && x.CoinType != nil {
		return *x.CoinType
	}
	return ""
}

func (x *Balance) GetBalance() uint64 {
	if x != nil && x.Balance != nil {
		return *x.Balance
	}
	return 0
}

// Request message for `NodeService.ListDynamicFields`
type ListDynamicFieldsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The `UID` of the parent, which owns the collections of dynamic fields.
	Parent *string `protobuf:"bytes,1,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
	// The maximum number of dynamic fields to return. The service may return fewer than this value.
	// If unspecified, at most `50` entries will be returned.
	// The maximum value is `1000`; values above `1000` will be coerced to `1000`.
	PageSize *uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// A page token, received from a previous `ListDynamicFields` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListDynamicFields` must
	// match the call that provided the page token.
	PageToken []byte `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// Mask specifying which fields to read.
	// If no mask is specified, defaults to `parent,field_id`.
	ReadMask      *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=read_mask,json=readMask,proto3,oneof" json:"read_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDynamicFieldsRequest) Reset() {
	*x = ListDynamicFieldsRequest{}
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDynamicFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDynamicFieldsRequest) ProtoMessage() {}

func (x *ListDynamicFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDynamicFieldsRequest.ProtoReflect.Descriptor instead.
func (*ListDynamicFieldsRequest) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListDynamicFieldsRequest) GetParent() string {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return ""
}

func (x *ListDynamicFieldsRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListDynamicFieldsRequest) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

func (x *ListDynamicFieldsRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

// Response message for `NodeService.ListDynamicFields`
type ListDynamicFieldsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Page of dynamic fields owned by the specified parent.
	DynamicFields []*DynamicField `protobuf:"bytes,1,rep,name=dynamic_fields,json=dynamicFields,proto3" json:"dynamic_fields,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken []byte `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3,oneof" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDynamicFieldsResponse) Reset() {
	*x = ListDynamicFieldsResponse{}
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDynamicFieldsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDynamicFieldsResponse) ProtoMessage() {}

func (x *ListDynamicFieldsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDynamicFieldsResponse.ProtoReflect.Descriptor instead.
func (*ListDynamicFieldsResponse) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListDynamicFieldsResponse) GetDynamicFields() []*DynamicField {
	if x != nil {
		return x.DynamicFields
	}
	return nil
}

func (x *ListDynamicFieldsResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

type DynamicField struct {
	state protoimpl.MessageState         `protogen:"open.v1"`
	Kind  *DynamicField_DynamicFieldKind `protobuf:"varint,1,opt,name=kind,proto3,enum=sui.rpc.v2.DynamicField_DynamicFieldKind,oneof" json:"kind,omitempty"`
	// ObjectId of this dynamic field's parent.
	Parent *string `protobuf:"bytes,2,opt,name=parent,proto3,oneof" json:"parent,omitempty"`
	// ObjectId of this dynamic field.
	FieldId *string `protobuf:"bytes,3,opt,name=field_id,json=fieldId,proto3,oneof" json:"field_id,omitempty"`
	// The field object itself
	FieldObject *Object `protobuf:"bytes,4,opt,name=field_object,json=fieldObject,proto3,oneof" json:"field_object,omitempty"`
	// The dynamic field's "name"
	Name *Bcs `protobuf:"bytes,5,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The dynamic field's "value"
	Value *Bcs `protobuf:"bytes,6,opt,name=value,proto3,oneof" json:"value,omitempty"`
	// The type of the dynamic field "value".
	//
	// If this is a dynamic object field then this is the type of the object
	// itself (which is a child of this field), otherwise this is the type of the
	// value of this field.
	ValueType *string `protobuf:"bytes,7,opt,name=value_type,json=valueType,proto3,oneof" json:"value_type,omitempty"`
	// The ObjectId of the child object when a child is a dynamic
	// object field.
	//
	// The presence or absence of this field can be used to determine if a child
	// is a dynamic field or a dynamic child object
	ChildId *string `protobuf:"bytes,8,opt,name=child_id,json=childId,proto3,oneof" json:"child_id,omitempty"`
	// The object itself when a child is a dynamic object field.
	ChildObject   *Object `protobuf:"bytes,9,opt,name=child_object,json=childObject,proto3,oneof" json:"child_object,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DynamicField) Reset() {
	*x = DynamicField{}
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamicField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicField) ProtoMessage() {}

func (x *DynamicField) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicField.ProtoReflect.Descriptor instead.
func (*DynamicField) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{12}
}

func (x *DynamicField) GetKind() DynamicField_DynamicFieldKind {
	if x != nil && x.Kind != nil {
		return *x.Kind
	}
	return DynamicField_DYNAMIC_FIELD_KIND_UNKNOWN
}

func (x *DynamicField) GetParent() string {
	if x != nil && x.Parent != nil {
		return *x.Parent
	}
	return ""
}

func (x *DynamicField) GetFieldId() string {
	if x != nil && x.FieldId != nil {
		return *x.FieldId
	}
	return ""
}

func (x *DynamicField) GetFieldObject() *Object {
	if x != nil {
		return x.FieldObject
	}
	return nil
}

func (x *DynamicField) GetName() *Bcs {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *DynamicField) GetValue() *Bcs {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *DynamicField) GetValueType() string {
	if x != nil && x.ValueType != nil {
		return *x.ValueType
	}
	return ""
}

func (x *DynamicField) GetChildId() string {
	if x != nil && x.ChildId != nil {
		return *x.ChildId
	}
	return ""
}

func (x *DynamicField) GetChildObject() *Object {
	if x != nil {
		return x.ChildObject
	}
	return nil
}

type ListOwnedObjectsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The address of the account that owns the objects.
	Owner *string `protobuf:"bytes,1,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	// The maximum number of entries return. The service may return fewer than this value.
	// If unspecified, at most `50` entries will be returned.
	// The maximum value is `1000`; values above `1000` will be coerced to `1000`.
	PageSize *uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// A page token, received from a previous `ListOwnedObjects` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListOwnedObjects` must
	// match the call that provided the page token.
	PageToken []byte `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// Mask specifying which fields to read.
	// If no mask is specified, defaults to `object_id,version,object_type`.
	ReadMask *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=read_mask,json=readMask,proto3,oneof" json:"read_mask,omitempty"`
	// Optional type filter to limit the types of objects listed.
	//
	// Providing an object type with no type params will return objects of that
	// type with any type parameter, e.g. `0x2::coin::Coin` will return all
	// `Coin<T>` objects regardless of the type parameter `T`. Providing a type
	// with a type param will restrict the returned objects to only those objects
	// that match the provided type parameters, e.g.
	// `0x2::coin::Coin<0x2::sui::SUI>` will only return `Coin<SUI>` objects.
	ObjectType    *string `protobuf:"bytes,5,opt,name=object_type,json=objectType,proto3,oneof" json:"object_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOwnedObjectsRequest) Reset() {
	*x = ListOwnedObjectsRequest{}
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOwnedObjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOwnedObjectsRequest) ProtoMessage() {}

func (x *ListOwnedObjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOwnedObjectsRequest.ProtoReflect.Descriptor instead.
func (*ListOwnedObjectsRequest) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListOwnedObjectsRequest) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *ListOwnedObjectsRequest) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListOwnedObjectsRequest) GetPageToken() []byte {
	if x != nil {
		return x.PageToken
	}
	return nil
}

func (x *ListOwnedObjectsRequest) GetReadMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.ReadMask
	}
	return nil
}

func (x *ListOwnedObjectsRequest) GetObjectType() string {
	if x != nil && x.ObjectType != nil {
		return *x.ObjectType
	}
	return ""
}

type ListOwnedObjectsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Page of dynamic fields owned by the specified parent.
	Objects []*Object `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken []byte `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3,oneof" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOwnedObjectsResponse) Reset() {
	*x = ListOwnedObjectsResponse{}
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOwnedObjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOwnedObjectsResponse) ProtoMessage() {}

func (x *ListOwnedObjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sui_rpc_v2_state_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOwnedObjectsResponse.ProtoReflect.Descriptor instead.
func (*ListOwnedObjectsResponse) Descriptor() ([]byte, []int) {
	return file_sui_rpc_v2_state_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListOwnedObjectsResponse) GetObjects() []*Object {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *ListOwnedObjectsResponse) GetNextPageToken() []byte {
	if x != nil {
		return x.NextPageToken
	}
	return nil
}

var File_sui_rpc_v2_state_service_proto protoreflect.FileDescriptor

const file_sui_rpc_v2_state_service_proto_rawDesc = "" +
	"\n" +
	"\x1esui/rpc/v2/state_service.proto\x12\n" +
	"sui.rpc.v2\x1a google/protobuf/field_mask.proto\x1a\x14sui/rpc/v2/bcs.proto\x1a\x17sui/rpc/v2/object.proto\"D\n" +
	"\x12GetCoinInfoRequest\x12 \n" +
	"\tcoin_type\x18\x01 \x01(\tH\x00R\bcoinType\x88\x01\x01B\f\n" +
	"\n" +
	"_coin_type\"\xc3\x02\n" +
	"\x13GetCoinInfoResponse\x12 \n" +
	"\tcoin_type\x18\x01 \x01(\tH\x00R\bcoinType\x88\x01\x01\x129\n" +
	"\bmetadata\x18\x02 \x01(\v2\x18.sui.rpc.v2.CoinMetadataH\x01R\bmetadata\x88\x01\x01\x129\n" +
	"\btreasury\x18\x03 \x01(\v2\x18.sui.rpc.v2.CoinTreasuryH\x02R\btreasury\x88\x01\x01\x12U\n" +
	"\x12regulated_metadata\x18\x04 \x01(\v2!.sui.rpc.v2.RegulatedCoinMetadataH\x03R\x11regulatedMetadata\x88\x01\x01B\f\n" +
	"\n" +
	"_coin_typeB\v\n" +
	"\t_metadataB\v\n" +
	"\t_treasuryB\x15\n" +
	"\x13_regulated_metadata\"\x99\x04\n" +
	"\fCoinMetadata\x12\x13\n" +
	"\x02id\x18\x01 \x01(\tH\x00R\x02id\x88\x01\x01\x12\x1f\n" +
	"\bdecimals\x18\x02 \x01(\rH\x01R\bdecimals\x88\x01\x01\x12\x17\n" +
	"\x04name\x18\x03 \x01(\tH\x02R\x04name\x88\x01\x01\x12\x1b\n" +
	"\x06symbol\x18\x04 \x01(\tH\x03R\x06symbol\x88\x01\x01\x12%\n" +
	"\vdescription\x18\x05 \x01(\tH\x04R\vdescription\x88\x01\x01\x12\x1e\n" +
	"\bicon_url\x18\x06 \x01(\tH\x05R\aiconUrl\x88\x01\x01\x12+\n" +
	"\x0fmetadata_cap_id\x18\a \x01(\tH\x06R\rmetadataCapId\x88\x01\x01\x12\\\n" +
	"\x12metadata_cap_state\x18\b \x01(\x0e2).sui.rpc.v2.CoinMetadata.MetadataCapStateH\aR\x10metadataCapState\x88\x01\x01\"[\n" +
	"\x10MetadataCapState\x12\x1e\n" +
	"\x1aMETADATA_CAP_STATE_UNKNOWN\x10\x00\x12\v\n" +
	"\aCLAIMED\x10\x01\x12\r\n" +
	"\tUNCLAIMED\x10\x02\x12\v\n" +
	"\aDELETED\x10\x03B\x05\n" +
	"\x03_idB\v\n" +
	"\t_decimalsB\a\n" +
	"\x05_nameB\t\n" +
	"\a_symbolB\x0e\n" +
	"\f_descriptionB\v\n" +
	"\t_icon_urlB\x12\n" +
	"\x10_metadata_cap_idB\x15\n" +
	"\x13_metadata_cap_state\"\x85\x02\n" +
	"\fCoinTreasury\x12\x13\n" +
	"\x02id\x18\x01 \x01(\tH\x00R\x02id\x88\x01\x01\x12&\n" +
	"\ftotal_supply\x18\x02 \x01(\x04H\x01R\vtotalSupply\x88\x01\x01\x12L\n" +
	"\fsupply_state\x18\x03 \x01(\x0e2$.sui.rpc.v2.CoinTreasury.SupplyStateH\x02R\vsupplyState\x88\x01\x01\"A\n" +
	"\vSupplyState\x12\x18\n" +
	"\x14SUPPLY_STATE_UNKNOWN\x10\x00\x12\t\n" +
	"\x05FIXED\x10\x01\x12\r\n" +
	"\tBURN_ONLY\x10\x02B\x05\n" +
	"\x03_idB\x0f\n" +
	"\r_total_supplyB\x0f\n" +
	"\r_supply_state\"\x97\x04\n" +
	"\x15RegulatedCoinMetadata\x12\x13\n" +
	"\x02id\x18\x01 \x01(\tH\x00R\x02id\x88\x01\x01\x125\n" +
	"\x14coin_metadata_object\x18\x02 \x01(\tH\x01R\x12coinMetadataObject\x88\x01\x01\x12+\n" +
	"\x0fdeny_cap_object\x18\x03 \x01(\tH\x02R\rdenyCapObject\x88\x01\x01\x121\n" +
	"\x12allow_global_pause\x18\x04 \x01(\bH\x03R\x10allowGlobalPause\x88\x01\x01\x12\x1d\n" +
	"\avariant\x18\x05 \x01(\rH\x04R\avariant\x88\x01\x01\x12k\n" +
	"\x14coin_regulated_state\x18\x06 \x01(\x0e24.sui.rpc.v2.RegulatedCoinMetadata.CoinRegulatedStateH\x05R\x12coinRegulatedState\x88\x01\x01\"V\n" +
	"\x12CoinRegulatedState\x12 \n" +
	"\x1cCOIN_REGULATED_STATE_UNKNOWN\x10\x00\x12\r\n" +
	"\tREGULATED\x10\x01\x12\x0f\n" +
	"\vUNREGULATED\x10\x02B\x05\n" +
	"\x03_idB\x17\n" +
	"\x15_coin_metadata_objectB\x12\n" +
	"\x10_deny_cap_objectB\x15\n" +
	"\x13_allow_global_pauseB\n" +
	"\n" +
	"\b_variantB\x17\n" +
	"\x15_coin_regulated_state\"h\n" +
	"\x11GetBalanceRequest\x12\x19\n" +
	"\x05owner\x18\x01 \x01(\tH\x00R\x05owner\x88\x01\x01\x12 \n" +
	"\tcoin_type\x18\x02 \x01(\tH\x01R\bcoinType\x88\x01\x01B\b\n" +
	"\x06_ownerB\f\n" +
	"\n" +
	"_coin_type\"T\n" +
	"\x12GetBalanceResponse\x122\n" +
	"\abalance\x18\x01 \x01(\v2\x13.sui.rpc.v2.BalanceH\x00R\abalance\x88\x01\x01B\n" +
	"\n" +
	"\b_balance\"\x9d\x01\n" +
	"\x13ListBalancesRequest\x12\x19\n" +
	"\x05owner\x18\x01 \x01(\tH\x00R\x05owner\x88\x01\x01\x12 \n" +
	"\tpage_size\x18\x02 \x01(\rH\x01R\bpageSize\x88\x01\x01\x12\"\n" +
	"\n" +
	"page_token\x18\x03 \x01(\fH\x02R\tpageToken\x88\x01\x01B\b\n" +
	"\x06_ownerB\f\n" +
	"\n" +
	"_page_sizeB\r\n" +
	"\v_page_token\"\x88\x01\n" +
	"\x14ListBalancesResponse\x12/\n" +
	"\bbalances\x18\x01 \x03(\v2\x13.sui.rpc.v2.BalanceR\bbalances\x12+\n" +
	"\x0fnext_page_token\x18\x02 \x01(\fH\x00R\rnextPageToken\x88\x01\x01B\x12\n" +
	"\x10_next_page_token\"d\n" +
	"\aBalance\x12 \n" +
	"\tcoin_type\x18\x01 \x01(\tH\x00R\bcoinType\x88\x01\x01\x12\x1d\n" +
	"\abalance\x18\x03 \x01(\x04H\x01R\abalance\x88\x01\x01B\f\n" +
	"\n" +
	"_coin_typeB\n" +
	"\n" +
	"\b_balance\"\xf1\x01\n" +
	"\x18ListDynamicFieldsRequest\x12\x1b\n" +
	"\x06parent\x18\x01 \x01(\tH\x00R\x06parent\x88\x01\x01\x12 \n" +
	"\tpage_size\x18\x02 \x01(\rH\x01R\bpageSize\x88\x01\x01\x12\"\n" +
	"\n" +
	"page_token\x18\x03 \x01(\fH\x02R\tpageToken\x88\x01\x01\x12<\n" +
	"\tread_mask\x18\x04 \x01(\v2\x1a.google.protobuf.FieldMaskH\x03R\breadMask\x88\x01\x01B\t\n" +
	"\a_parentB\f\n" +
	"\n" +
	"_page_sizeB\r\n" +
	"\v_page_tokenB\f\n" +
	"\n" +
	"_read_mask\"\x9d\x01\n" +
	"\x19ListDynamicFieldsResponse\x12?\n" +
	"\x0edynamic_fields\x18\x01 \x03(\v2\x18.sui.rpc.v2.DynamicFieldR\rdynamicFields\x12+\n" +
	"\x0fnext_page_token\x18\x02 \x01(\fH\x00R\rnextPageToken\x88\x01\x01B\x12\n" +
	"\x10_next_page_token\"\xde\x04\n" +
	"\fDynamicField\x12B\n" +
	"\x04kind\x18\x01 \x01(\x0e2).sui.rpc.v2.DynamicField.DynamicFieldKindH\x00R\x04kind\x88\x01\x01\x12\x1b\n" +
	"\x06parent\x18\x02 \x01(\tH\x01R\x06parent\x88\x01\x01\x12\x1e\n" +
	"\bfield_id\x18\x03 \x01(\tH\x02R\afieldId\x88\x01\x01\x12:\n" +
	"\ffield_object\x18\x04 \x01(\v2\x12.sui.rpc.v2.ObjectH\x03R\vfieldObject\x88\x01\x01\x12(\n" +
	"\x04name\x18\x05 \x01(\v2\x0f.sui.rpc.v2.BcsH\x04R\x04name\x88\x01\x01\x12*\n" +
	"\x05value\x18\x06 \x01(\v2\x0f.sui.rpc.v2.BcsH\x05R\x05value\x88\x01\x01\x12\"\n" +
	"\n" +
	"value_type\x18\a \x01(\tH\x06R\tvalueType\x88\x01\x01\x12\x1e\n" +
	"\bchild_id\x18\b \x01(\tH\aR\achildId\x88\x01\x01\x12:\n" +
	"\fchild_object\x18\t \x01(\v2\x12.sui.rpc.v2.ObjectH\bR\vchildObject\x88\x01\x01\"I\n" +
	"\x10DynamicFieldKind\x12\x1e\n" +
	"\x1aDYNAMIC_FIELD_KIND_UNKNOWN\x10\x00\x12\t\n" +
	"\x05FIELD\x10\x01\x12\n" +
	"\n" +
	"\x06OBJECT\x10\x02B\a\n" +
	"\x05_kindB\t\n" +
	"\a_parentB\v\n" +
	"\t_field_idB\x0f\n" +
	"\r_field_objectB\a\n" +
	"\x05_nameB\b\n" +
	"\x06_valueB\r\n" +
	"\v_value_typeB\v\n" +
	"\t_child_idB\x0f\n" +
	"\r_child_object\"\xa3\x02\n" +
	"\x17ListOwnedObjectsRequest\x12\x19\n" +
	"\x05owner\x18\x01 \x01(\tH\x00R\x05owner\x88\x01\x01\x12 \n" +
	"\tpage_size\x18\x02 \x01(\rH\x01R\bpageSize\x88\x01\x01\x12\"\n" +
	"\n" +
	"page_token\x18\x03 \x01(\fH\x02R\tpageToken\x88\x01\x01\x12<\n" +
	"\tread_mask\x18\x04 \x01(\v2\x1a.google.protobuf.FieldMaskH\x03R\breadMask\x88\x01\x01\x12$\n" +
	"\vobject_type\x18\x05 \x01(\tH\x04R\n" +
	"objectType\x88\x01\x01B\b\n" +
	"\x06_ownerB\f\n" +
	"\n" +
	"_page_sizeB\r\n" +
	"\v_page_tokenB\f\n" +
	"\n" +
	"_read_maskB\x0e\n" +
	"\f_object_type\"\x89\x01\n" +
	"\x18ListOwnedObjectsResponse\x12,\n" +
	"\aobjects\x18\x01 \x03(\v2\x12.sui.rpc.v2.ObjectR\aobjects\x12+\n" +
	"\x0fnext_page_token\x18\x02 \x01(\fH\x00R\rnextPageToken\x88\x01\x01B\x12\n" +
	"\x10_next_page_token2\xbf\x03\n" +
	"\fStateService\x12`\n" +
	"\x11ListDynamicFields\x12$.sui.rpc.v2.ListDynamicFieldsRequest\x1a%.sui.rpc.v2.ListDynamicFieldsResponse\x12]\n" +
	"\x10ListOwnedObjects\x12#.sui.rpc.v2.ListOwnedObjectsRequest\x1a$.sui.rpc.v2.ListOwnedObjectsResponse\x12N\n" +
	"\vGetCoinInfo\x12\x1e.sui.rpc.v2.GetCoinInfoRequest\x1a\x1f.sui.rpc.v2.GetCoinInfoResponse\x12K\n" +
	"\n" +
	"GetBalance\x12\x1d.sui.rpc.v2.GetBalanceRequest\x1a\x1e.sui.rpc.v2.GetBalanceResponse\x12Q\n" +
	"\fListBalances\x12\x1f.sui.rpc.v2.ListBalancesRequest\x1a .sui.rpc.v2.ListBalancesResponseb\x06proto3"

var (
	file_sui_rpc_v2_state_service_proto_rawDescOnce sync.Once
	file_sui_rpc_v2_state_service_proto_rawDescData []byte
)

func file_sui_rpc_v2_state_service_proto_rawDescGZIP() []byte {
	file_sui_rpc_v2_state_service_proto_rawDescOnce.Do(func() {
		file_sui_rpc_v2_state_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sui_rpc_v2_state_service_proto_rawDesc), len(file_sui_rpc_v2_state_service_proto_rawDesc)))
	})
	return file_sui_rpc_v2_state_service_proto_rawDescData
}

var file_sui_rpc_v2_state_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_sui_rpc_v2_state_service_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_sui_rpc_v2_state_service_proto_goTypes = []any{
	(CoinMetadata_MetadataCapState)(0),            // 0: sui.rpc.v2.CoinMetadata.MetadataCapState
	(CoinTreasury_SupplyState)(0),                 // 1: sui.rpc.v2.CoinTreasury.SupplyState
	(RegulatedCoinMetadata_CoinRegulatedState)(0), // 2: sui.rpc.v2.RegulatedCoinMetadata.CoinRegulatedState
	(DynamicField_DynamicFieldKind)(0),            // 3: sui.rpc.v2.DynamicField.DynamicFieldKind
	(*GetCoinInfoRequest)(nil),                    // 4: sui.rpc.v2.GetCoinInfoRequest
	(*GetCoinInfoResponse)(nil),                   // 5: sui.rpc.v2.GetCoinInfoResponse
	(*CoinMetadata)(nil),                          // 6: sui.rpc.v2.CoinMetadata
	(*CoinTreasury)(nil),                          // 7: sui.rpc.v2.CoinTreasury
	(*RegulatedCoinMetadata)(nil),                 // 8: sui.rpc.v2.RegulatedCoinMetadata
	(*GetBalanceRequest)(nil),                     // 9: sui.rpc.v2.GetBalanceRequest
	(*GetBalanceResponse)(nil),                    // 10: sui.rpc.v2.GetBalanceResponse
	(*ListBalancesRequest)(nil),                   // 11: sui.rpc.v2.ListBalancesRequest
	(*ListBalancesResponse)(nil),                  // 12: sui.rpc.v2.ListBalancesResponse
	(*Balance)(nil),                               // 13: sui.rpc.v2.Balance
	(*ListDynamicFieldsRequest)(nil),              // 14: sui.rpc.v2.ListDynamicFieldsRequest
	(*ListDynamicFieldsResponse)(nil),             // 15: sui.rpc.v2.ListDynamicFieldsResponse
	(*DynamicField)(nil),                          // 16: sui.rpc.v2.DynamicField
	(*ListOwnedObjectsRequest)(nil),               // 17: sui.rpc.v2.ListOwnedObjectsRequest
	(*ListOwnedObjectsResponse)(nil),              // 18: sui.rpc.v2.ListOwnedObjectsResponse
	(*fieldmaskpb.FieldMask)(nil),                 // 19: google.protobuf.FieldMask
	(*Object)(nil),                                // 20: sui.rpc.v2.Object
	(*Bcs)(nil),                                   // 21: sui.rpc.v2.Bcs
}
var file_sui_rpc_v2_state_service_proto_depIdxs = []int32{
	6,  // 0: sui.rpc.v2.GetCoinInfoResponse.metadata:type_name -> sui.rpc.v2.CoinMetadata
	7,  // 1: sui.rpc.v2.GetCoinInfoResponse.treasury:type_name -> sui.rpc.v2.CoinTreasury
	8,  // 2: sui.rpc.v2.GetCoinInfoResponse.regulated_metadata:type_name -> sui.rpc.v2.RegulatedCoinMetadata
	0,  // 3: sui.rpc.v2.CoinMetadata.metadata_cap_state:type_name -> sui.rpc.v2.CoinMetadata.MetadataCapState
	1,  // 4: sui.rpc.v2.CoinTreasury.supply_state:type_name -> sui.rpc.v2.CoinTreasury.SupplyState
	2,  // 5: sui.rpc.v2.RegulatedCoinMetadata.coin_regulated_state:type_name -> sui.rpc.v2.RegulatedCoinMetadata.CoinRegulatedState
	13, // 6: sui.rpc.v2.GetBalanceResponse.balance:type_name -> sui.rpc.v2.Balance
	13, // 7: sui.rpc.v2.ListBalancesResponse.balances:type_name -> sui.rpc.v2.Balance
	19, // 8: sui.rpc.v2.ListDynamicFieldsRequest.read_mask:type_name -> google.protobuf.FieldMask
	16, // 9: sui.rpc.v2.ListDynamicFieldsResponse.dynamic_fields:type_name -> sui.rpc.v2.DynamicField
	3,  // 10: sui.rpc.v2.DynamicField.kind:type_name -> sui.rpc.v2.DynamicField.DynamicFieldKind
	20, // 11: sui.rpc.v2.DynamicField.field_object:type_name -> sui.rpc.v2.Object
	21, // 12: sui.rpc.v2.DynamicField.name:type_name -> sui.rpc.v2.Bcs
	21, // 13: sui.rpc.v2.DynamicField.value:type_name -> sui.rpc.v2.Bcs
	20, // 14: sui.rpc.v2.DynamicField.child_object:type_name -> sui.rpc.v2.Object
	19, // 15: sui.rpc.v2.ListOwnedObjectsRequest.read_mask:type_name -> google.protobuf.FieldMask
	20, // 16: sui.rpc.v2.ListOwnedObjectsResponse.objects:type_name -> sui.rpc.v2.Object
	14, // 17: sui.rpc.v2.StateService.ListDynamicFields:input_type -> sui.rpc.v2.ListDynamicFieldsRequest
	17, // 18: sui.rpc.v2.StateService.ListOwnedObjects:input_type -> sui.rpc.v2.ListOwnedObjectsRequest
	4,  // 19: sui.rpc.v2.StateService.GetCoinInfo:input_type -> sui.rpc.v2.GetCoinInfoRequest
	9,  // 20: sui.rpc.v2.StateService.GetBalance:input_type -> sui.rpc.v2.GetBalanceRequest
	11, // 21: sui.rpc.v2.StateService.ListBalances:input_type -> sui.rpc.v2.ListBalancesRequest
	15, // 22: sui.rpc.v2.StateService.ListDynamicFields:output_type -> sui.rpc.v2.ListDynamicFieldsResponse
	18, // 23: sui.rpc.v2.StateService.ListOwnedObjects:output_type -> sui.rpc.v2.ListOwnedObjectsResponse
	5,  // 24: sui.rpc.v2.StateService.GetCoinInfo:output_type -> sui.rpc.v2.GetCoinInfoResponse
	10, // 25: sui.rpc.v2.StateService.GetBalance:output_type -> sui.rpc.v2.GetBalanceResponse
	12, // 26: sui.rpc.v2.StateService.ListBalances:output_type -> sui.rpc.v2.ListBalancesResponse
	22, // [22:27] is the sub-list for method output_type
	17, // [17:22] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_sui_rpc_v2_state_service_proto_init() }
func file_sui_rpc_v2_state_service_proto_init() {
	if File_sui_rpc_v2_state_service_proto != nil {
		return
	}
	file_sui_rpc_v2_bcs_proto_init()
	file_sui_rpc_v2_object_proto_init()
	file_sui_rpc_v2_state_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_sui_rpc_v2_state_service_proto_msgTypes[1].OneofWrappers = []any{}
	file_sui_rpc_v2_state_service_proto_msgTypes[2].OneofWrappers = []any{}
	file_sui_rpc_v2_state_service_proto_msgTypes[3].OneofWrappers = []any{}
	file_sui_rpc_v2_state_service_proto_msgTypes[4].OneofWrappers = []any{}
	file_sui_rpc_v2_state_service_proto_msgTypes[5].OneofWrappers = []any{}
	file_sui_rpc_v2_state_service_proto_msgTypes[6].OneofWrappers = []any{}
	file_sui_rpc_v2_state_service_proto_msgTypes[7].OneofWrappers = []any{}
	file_sui_rpc_v2_state_service_proto_msgTypes[8].OneofWrappers = []any{}
	file_sui_rpc_v2_state_service_proto_msgTypes[9].OneofWrappers = []any{}
	file_sui_rpc_v2_state_service_proto_msgTypes[10].OneofWrappers = []any{}
	file_sui_rpc_v2_state_service_proto_msgTypes[11].OneofWrappers = []any{}
	file_sui_rpc_v2_state_service_proto_msgTypes[12].OneofWrappers = []any{}
	file_sui_rpc_v2_state_service_proto_msgTypes[13].OneofWrappers = []any{}
	file_sui_rpc_v2_state_service_proto_msgTypes[14].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sui_rpc_v2_state_service_proto_rawDesc), len(file_sui_rpc_v2_state_service_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sui_rpc_v2_state_service_proto_goTypes,
		DependencyIndexes: file_sui_rpc_v2_state_service_proto_depIdxs,
		EnumInfos:         file_sui_rpc_v2_state_service_proto_enumTypes,
		MessageInfos:      file_sui_rpc_v2_state_service_proto_msgTypes,
	}.Build()
	File_sui_rpc_v2_state_service_proto = out.File
	file_sui_rpc_v2_state_service_proto_goTypes = nil
	file_sui_rpc_v2_state_service_proto_depIdxs = nil
}
